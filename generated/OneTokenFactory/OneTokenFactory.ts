// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddOracle extends ethereum.Event {
  get params(): AddOracle__Params {
    return new AddOracle__Params(this);
  }
}

export class AddOracle__Params {
  _event: AddOracle;

  constructor(event: AddOracle) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get foreignToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class ForeignTokenAdmitted extends ethereum.Event {
  get params(): ForeignTokenAdmitted__Params {
    return new ForeignTokenAdmitted__Params(this);
  }
}

export class ForeignTokenAdmitted__Params {
  _event: ForeignTokenAdmitted;

  constructor(event: ForeignTokenAdmitted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get foreignToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isCollateral(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }

  get oracle(): Address {
    return this._event.parameters[3].value.toAddress();
  }
}

export class ForeignTokenRemoved extends ethereum.Event {
  get params(): ForeignTokenRemoved__Params {
    return new ForeignTokenRemoved__Params(this);
  }
}

export class ForeignTokenRemoved__Params {
  _event: ForeignTokenRemoved;

  constructor(event: ForeignTokenRemoved) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get foreignToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ForeignTokenUpdated extends ethereum.Event {
  get params(): ForeignTokenUpdated__Params {
    return new ForeignTokenUpdated__Params(this);
  }
}

export class ForeignTokenUpdated__Params {
  _event: ForeignTokenUpdated;

  constructor(event: ForeignTokenUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get foreignToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get isCollateral(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class ModuleAdmitted extends ethereum.Event {
  get params(): ModuleAdmitted__Params {
    return new ModuleAdmitted__Params(this);
  }
}

export class ModuleAdmitted__Params {
  _event: ModuleAdmitted;

  constructor(event: ModuleAdmitted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get module(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get moduleType(): i32 {
    return this._event.parameters[2].value.toI32();
  }

  get name(): string {
    return this._event.parameters[3].value.toString();
  }

  get url(): string {
    return this._event.parameters[4].value.toString();
  }
}

export class ModuleRemoved extends ethereum.Event {
  get params(): ModuleRemoved__Params {
    return new ModuleRemoved__Params(this);
  }
}

export class ModuleRemoved__Params {
  _event: ModuleRemoved;

  constructor(event: ModuleRemoved) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get module(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ModuleUpdated extends ethereum.Event {
  get params(): ModuleUpdated__Params {
    return new ModuleUpdated__Params(this);
  }
}

export class ModuleUpdated__Params {
  _event: ModuleUpdated;

  constructor(event: ModuleUpdated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get module(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get url(): string {
    return this._event.parameters[3].value.toString();
  }
}

export class OneTokenAdmin extends ethereum.Event {
  get params(): OneTokenAdmin__Params {
    return new OneTokenAdmin__Params(this);
  }
}

export class OneTokenAdmin__Params {
  _event: OneTokenAdmin;

  constructor(event: OneTokenAdmin) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOneTokenProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get proxyAdmin(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OneTokenDeployed extends ethereum.Event {
  get params(): OneTokenDeployed__Params {
    return new OneTokenDeployed__Params(this);
  }
}

export class OneTokenDeployed__Params {
  _event: OneTokenDeployed;

  constructor(event: OneTokenDeployed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOneTokenProxy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[2].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[3].value.toString();
  }

  get governance(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get version(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get controller(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get mintMaster(): Address {
    return this._event.parameters[7].value.toAddress();
  }

  get oneTokenOracle(): Address {
    return this._event.parameters[8].value.toAddress();
  }

  get memberToken(): Address {
    return this._event.parameters[9].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[10].value.toAddress();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class RemoveOracle extends ethereum.Event {
  get params(): RemoveOracle__Params {
    return new RemoveOracle__Params(this);
  }
}

export class RemoveOracle__Params {
  _event: RemoveOracle;

  constructor(event: RemoveOracle) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get foreignToken(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class OneTokenFactory__deployOneTokenProxyResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class OneTokenFactory__foreignTokenInfoResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class OneTokenFactory__modulesResult {
  value0: string;
  value1: string;
  value2: i32;

  constructor(value0: string, value1: string, value2: i32) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromString(this.value0));
    map.set("value1", ethereum.Value.fromString(this.value1));
    map.set(
      "value2",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value2))
    );
    return map;
  }
}

export class OneTokenFactory extends ethereum.SmartContract {
  static bind(address: Address): OneTokenFactory {
    return new OneTokenFactory("OneTokenFactory", address);
  }

  MODULE_TYPE(): Bytes {
    let result = super.call("MODULE_TYPE", "MODULE_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MODULE_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MODULE_TYPE", "MODULE_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  deployOneTokenProxy(
    name: string,
    symbol: string,
    governance: Address,
    version: Address,
    controller: Address,
    mintMaster: Address,
    oneTokenOracle: Address,
    memberToken: Address,
    collateral: Address
  ): OneTokenFactory__deployOneTokenProxyResult {
    let result = super.call(
      "deployOneTokenProxy",
      "deployOneTokenProxy(string,string,address,address,address,address,address,address,address):(address,address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(version),
        ethereum.Value.fromAddress(controller),
        ethereum.Value.fromAddress(mintMaster),
        ethereum.Value.fromAddress(oneTokenOracle),
        ethereum.Value.fromAddress(memberToken),
        ethereum.Value.fromAddress(collateral)
      ]
    );

    return new OneTokenFactory__deployOneTokenProxyResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_deployOneTokenProxy(
    name: string,
    symbol: string,
    governance: Address,
    version: Address,
    controller: Address,
    mintMaster: Address,
    oneTokenOracle: Address,
    memberToken: Address,
    collateral: Address
  ): ethereum.CallResult<OneTokenFactory__deployOneTokenProxyResult> {
    let result = super.tryCall(
      "deployOneTokenProxy",
      "deployOneTokenProxy(string,string,address,address,address,address,address,address,address):(address,address)",
      [
        ethereum.Value.fromString(name),
        ethereum.Value.fromString(symbol),
        ethereum.Value.fromAddress(governance),
        ethereum.Value.fromAddress(version),
        ethereum.Value.fromAddress(controller),
        ethereum.Value.fromAddress(mintMaster),
        ethereum.Value.fromAddress(oneTokenOracle),
        ethereum.Value.fromAddress(memberToken),
        ethereum.Value.fromAddress(collateral)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OneTokenFactory__deployOneTokenProxyResult(
        value[0].toAddress(),
        value[1].toAddress()
      )
    );
  }

  foreignTokenAtIndex(index: BigInt): Address {
    let result = super.call(
      "foreignTokenAtIndex",
      "foreignTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_foreignTokenAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "foreignTokenAtIndex",
      "foreignTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  foreignTokenCount(): BigInt {
    let result = super.call(
      "foreignTokenCount",
      "foreignTokenCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_foreignTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "foreignTokenCount",
      "foreignTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  foreignTokenInfo(
    foreignToken: Address
  ): OneTokenFactory__foreignTokenInfoResult {
    let result = super.call(
      "foreignTokenInfo",
      "foreignTokenInfo(address):(bool,uint256)",
      [ethereum.Value.fromAddress(foreignToken)]
    );

    return new OneTokenFactory__foreignTokenInfoResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_foreignTokenInfo(
    foreignToken: Address
  ): ethereum.CallResult<OneTokenFactory__foreignTokenInfoResult> {
    let result = super.tryCall(
      "foreignTokenInfo",
      "foreignTokenInfo(address):(bool,uint256)",
      [ethereum.Value.fromAddress(foreignToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OneTokenFactory__foreignTokenInfoResult(
        value[0].toBoolean(),
        value[1].toBigInt()
      )
    );
  }

  foreignTokenOracleAtIndex(foreignToken: Address, index: BigInt): Address {
    let result = super.call(
      "foreignTokenOracleAtIndex",
      "foreignTokenOracleAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(foreignToken),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );

    return result[0].toAddress();
  }

  try_foreignTokenOracleAtIndex(
    foreignToken: Address,
    index: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "foreignTokenOracleAtIndex",
      "foreignTokenOracleAtIndex(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(foreignToken),
        ethereum.Value.fromUnsignedBigInt(index)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  foreignTokenOracleCount(foreignToken: Address): BigInt {
    let result = super.call(
      "foreignTokenOracleCount",
      "foreignTokenOracleCount(address):(uint256)",
      [ethereum.Value.fromAddress(foreignToken)]
    );

    return result[0].toBigInt();
  }

  try_foreignTokenOracleCount(
    foreignToken: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "foreignTokenOracleCount",
      "foreignTokenOracleCount(address):(uint256)",
      [ethereum.Value.fromAddress(foreignToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isCollateral(foreignToken: Address): boolean {
    let result = super.call("isCollateral", "isCollateral(address):(bool)", [
      ethereum.Value.fromAddress(foreignToken)
    ]);

    return result[0].toBoolean();
  }

  try_isCollateral(foreignToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCollateral", "isCollateral(address):(bool)", [
      ethereum.Value.fromAddress(foreignToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isForeignToken(foreignToken: Address): boolean {
    let result = super.call(
      "isForeignToken",
      "isForeignToken(address):(bool)",
      [ethereum.Value.fromAddress(foreignToken)]
    );

    return result[0].toBoolean();
  }

  try_isForeignToken(foreignToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isForeignToken",
      "isForeignToken(address):(bool)",
      [ethereum.Value.fromAddress(foreignToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isModule(module: Address): boolean {
    let result = super.call("isModule", "isModule(address):(bool)", [
      ethereum.Value.fromAddress(module)
    ]);

    return result[0].toBoolean();
  }

  try_isModule(module: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isModule", "isModule(address):(bool)", [
      ethereum.Value.fromAddress(module)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOneToken(oneToken: Address): boolean {
    let result = super.call("isOneToken", "isOneToken(address):(bool)", [
      ethereum.Value.fromAddress(oneToken)
    ]);

    return result[0].toBoolean();
  }

  try_isOneToken(oneToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOneToken", "isOneToken(address):(bool)", [
      ethereum.Value.fromAddress(oneToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOracle(foreignToken: Address, oracle: Address): boolean {
    let result = super.call("isOracle", "isOracle(address,address):(bool)", [
      ethereum.Value.fromAddress(foreignToken),
      ethereum.Value.fromAddress(oracle)
    ]);

    return result[0].toBoolean();
  }

  try_isOracle(
    foreignToken: Address,
    oracle: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOracle", "isOracle(address,address):(bool)", [
      ethereum.Value.fromAddress(foreignToken),
      ethereum.Value.fromAddress(oracle)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isValidModuleType(module: Address, moduleType: i32): boolean {
    let result = super.call(
      "isValidModuleType",
      "isValidModuleType(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(moduleType))
      ]
    );

    return result[0].toBoolean();
  }

  try_isValidModuleType(
    module: Address,
    moduleType: i32
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isValidModuleType",
      "isValidModuleType(address,uint8):(bool)",
      [
        ethereum.Value.fromAddress(module),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(moduleType))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  moduleAtIndex(index: BigInt): Address {
    let result = super.call(
      "moduleAtIndex",
      "moduleAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_moduleAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "moduleAtIndex",
      "moduleAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  moduleCount(): BigInt {
    let result = super.call("moduleCount", "moduleCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_moduleCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("moduleCount", "moduleCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  modules(param0: Address): OneTokenFactory__modulesResult {
    let result = super.call(
      "modules",
      "modules(address):(string,string,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OneTokenFactory__modulesResult(
      result[0].toString(),
      result[1].toString(),
      result[2].toI32()
    );
  }

  try_modules(
    param0: Address
  ): ethereum.CallResult<OneTokenFactory__modulesResult> {
    let result = super.tryCall(
      "modules",
      "modules(address):(string,string,uint8)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OneTokenFactory__modulesResult(
        value[0].toString(),
        value[1].toString(),
        value[2].toI32()
      )
    );
  }

  oneTokenAtIndex(index: BigInt): Address {
    let result = super.call(
      "oneTokenAtIndex",
      "oneTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_oneTokenAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oneTokenAtIndex",
      "oneTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  oneTokenCount(): BigInt {
    let result = super.call("oneTokenCount", "oneTokenCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_oneTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "oneTokenCount",
      "oneTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oneTokenProxyAdmins(param0: Address): Address {
    let result = super.call(
      "oneTokenProxyAdmins",
      "oneTokenProxyAdmins(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_oneTokenProxyAdmins(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oneTokenProxyAdmins",
      "oneTokenProxyAdmins(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AdmitForeignTokenCall extends ethereum.Call {
  get inputs(): AdmitForeignTokenCall__Inputs {
    return new AdmitForeignTokenCall__Inputs(this);
  }

  get outputs(): AdmitForeignTokenCall__Outputs {
    return new AdmitForeignTokenCall__Outputs(this);
  }
}

export class AdmitForeignTokenCall__Inputs {
  _call: AdmitForeignTokenCall;

  constructor(call: AdmitForeignTokenCall) {
    this._call = call;
  }

  get foreignToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get oracle(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class AdmitForeignTokenCall__Outputs {
  _call: AdmitForeignTokenCall;

  constructor(call: AdmitForeignTokenCall) {
    this._call = call;
  }
}

export class AdmitModuleCall extends ethereum.Call {
  get inputs(): AdmitModuleCall__Inputs {
    return new AdmitModuleCall__Inputs(this);
  }

  get outputs(): AdmitModuleCall__Outputs {
    return new AdmitModuleCall__Outputs(this);
  }
}

export class AdmitModuleCall__Inputs {
  _call: AdmitModuleCall;

  constructor(call: AdmitModuleCall) {
    this._call = call;
  }

  get module(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get moduleType(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get name(): string {
    return this._call.inputValues[2].value.toString();
  }

  get url(): string {
    return this._call.inputValues[3].value.toString();
  }
}

export class AdmitModuleCall__Outputs {
  _call: AdmitModuleCall;

  constructor(call: AdmitModuleCall) {
    this._call = call;
  }
}

export class AssignOracleCall extends ethereum.Call {
  get inputs(): AssignOracleCall__Inputs {
    return new AssignOracleCall__Inputs(this);
  }

  get outputs(): AssignOracleCall__Outputs {
    return new AssignOracleCall__Outputs(this);
  }
}

export class AssignOracleCall__Inputs {
  _call: AssignOracleCall;

  constructor(call: AssignOracleCall) {
    this._call = call;
  }

  get foreignToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AssignOracleCall__Outputs {
  _call: AssignOracleCall;

  constructor(call: AssignOracleCall) {
    this._call = call;
  }
}

export class DeployOneTokenProxyCall extends ethereum.Call {
  get inputs(): DeployOneTokenProxyCall__Inputs {
    return new DeployOneTokenProxyCall__Inputs(this);
  }

  get outputs(): DeployOneTokenProxyCall__Outputs {
    return new DeployOneTokenProxyCall__Outputs(this);
  }
}

export class DeployOneTokenProxyCall__Inputs {
  _call: DeployOneTokenProxyCall;

  constructor(call: DeployOneTokenProxyCall) {
    this._call = call;
  }

  get name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol(): string {
    return this._call.inputValues[1].value.toString();
  }

  get governance(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get version(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get controller(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get mintMaster(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get oneTokenOracle(): Address {
    return this._call.inputValues[6].value.toAddress();
  }

  get memberToken(): Address {
    return this._call.inputValues[7].value.toAddress();
  }

  get collateral(): Address {
    return this._call.inputValues[8].value.toAddress();
  }
}

export class DeployOneTokenProxyCall__Outputs {
  _call: DeployOneTokenProxyCall;

  constructor(call: DeployOneTokenProxyCall) {
    this._call = call;
  }

  get newOneTokenProxy(): Address {
    return this._call.outputValues[0].value.toAddress();
  }

  get proxyAdmin(): Address {
    return this._call.outputValues[1].value.toAddress();
  }
}

export class RemoveForeignTokenCall extends ethereum.Call {
  get inputs(): RemoveForeignTokenCall__Inputs {
    return new RemoveForeignTokenCall__Inputs(this);
  }

  get outputs(): RemoveForeignTokenCall__Outputs {
    return new RemoveForeignTokenCall__Outputs(this);
  }
}

export class RemoveForeignTokenCall__Inputs {
  _call: RemoveForeignTokenCall;

  constructor(call: RemoveForeignTokenCall) {
    this._call = call;
  }

  get foreignToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveForeignTokenCall__Outputs {
  _call: RemoveForeignTokenCall;

  constructor(call: RemoveForeignTokenCall) {
    this._call = call;
  }
}

export class RemoveModuleCall extends ethereum.Call {
  get inputs(): RemoveModuleCall__Inputs {
    return new RemoveModuleCall__Inputs(this);
  }

  get outputs(): RemoveModuleCall__Outputs {
    return new RemoveModuleCall__Outputs(this);
  }
}

export class RemoveModuleCall__Inputs {
  _call: RemoveModuleCall;

  constructor(call: RemoveModuleCall) {
    this._call = call;
  }

  get module(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveModuleCall__Outputs {
  _call: RemoveModuleCall;

  constructor(call: RemoveModuleCall) {
    this._call = call;
  }
}

export class RemoveOracleCall extends ethereum.Call {
  get inputs(): RemoveOracleCall__Inputs {
    return new RemoveOracleCall__Inputs(this);
  }

  get outputs(): RemoveOracleCall__Outputs {
    return new RemoveOracleCall__Outputs(this);
  }
}

export class RemoveOracleCall__Inputs {
  _call: RemoveOracleCall;

  constructor(call: RemoveOracleCall) {
    this._call = call;
  }

  get foreignToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RemoveOracleCall__Outputs {
  _call: RemoveOracleCall;

  constructor(call: RemoveOracleCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateForeignTokenCall extends ethereum.Call {
  get inputs(): UpdateForeignTokenCall__Inputs {
    return new UpdateForeignTokenCall__Inputs(this);
  }

  get outputs(): UpdateForeignTokenCall__Outputs {
    return new UpdateForeignTokenCall__Outputs(this);
  }
}

export class UpdateForeignTokenCall__Inputs {
  _call: UpdateForeignTokenCall;

  constructor(call: UpdateForeignTokenCall) {
    this._call = call;
  }

  get foreignToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get collateral(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class UpdateForeignTokenCall__Outputs {
  _call: UpdateForeignTokenCall;

  constructor(call: UpdateForeignTokenCall) {
    this._call = call;
  }
}

export class UpdateModuleCall extends ethereum.Call {
  get inputs(): UpdateModuleCall__Inputs {
    return new UpdateModuleCall__Inputs(this);
  }

  get outputs(): UpdateModuleCall__Outputs {
    return new UpdateModuleCall__Outputs(this);
  }
}

export class UpdateModuleCall__Inputs {
  _call: UpdateModuleCall;

  constructor(call: UpdateModuleCall) {
    this._call = call;
  }

  get module(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get name(): string {
    return this._call.inputValues[1].value.toString();
  }

  get url(): string {
    return this._call.inputValues[2].value.toString();
  }
}

export class UpdateModuleCall__Outputs {
  _call: UpdateModuleCall;

  constructor(call: UpdateModuleCall) {
    this._call = call;
  }
}
