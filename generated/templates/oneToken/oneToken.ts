// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AssetAdded extends ethereum.Event {
  get params(): AssetAdded__Params {
    return new AssetAdded__Params(this);
  }
}

export class AssetAdded__Params {
  _event: AssetAdded;

  constructor(event: AssetAdded) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class AssetRemoved extends ethereum.Event {
  get params(): AssetRemoved__Params {
    return new AssetRemoved__Params(this);
  }
}

export class AssetRemoved__Params {
  _event: AssetRemoved;

  constructor(event: AssetRemoved) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ControllerChanged extends ethereum.Event {
  get params(): ControllerChanged__Params {
    return new ControllerChanged__Params(this);
  }
}

export class ControllerChanged__Params {
  _event: ControllerChanged;

  constructor(event: ControllerChanged) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get controller(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FromStrategy extends ethereum.Event {
  get params(): FromStrategy__Params {
    return new FromStrategy__Params(this);
  }
}

export class FromStrategy__Params {
  _event: FromStrategy;

  constructor(event: FromStrategy) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get name(): string {
    return this._event.parameters[1].value.toString();
  }

  get symbol(): string {
    return this._event.parameters[2].value.toString();
  }

  get controller(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get mintMaster(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get memberToken(): Address {
    return this._event.parameters[5].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[6].value.toAddress();
  }
}

export class MintMasterChanged extends ethereum.Event {
  get params(): MintMasterChanged__Params {
    return new MintMasterChanged__Params(this);
  }
}

export class MintMasterChanged__Params {
  _event: MintMasterChanged;

  constructor(event: MintMasterChanged) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get mintMaster(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oneTokenOracle(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get oneTokens(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get memberTokens(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get collateralTokens(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }
}

export class NewFactory extends ethereum.Event {
  get params(): NewFactory__Params {
    return new NewFactory__Params(this);
  }
}

export class NewFactory__Params {
  _event: NewFactory;

  constructor(event: NewFactory) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get factory(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewMintingFee extends ethereum.Event {
  get params(): NewMintingFee__Params {
    return new NewMintingFee__Params(this);
  }
}

export class NewMintingFee__Params {
  _event: NewMintingFee;

  constructor(event: NewMintingFee) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewRedemptionFee extends ethereum.Event {
  get params(): NewRedemptionFee__Params {
    return new NewRedemptionFee__Params(this);
  }
}

export class NewRedemptionFee__Params {
  _event: NewRedemptionFee;

  constructor(event: NewRedemptionFee) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get fee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Redeemed extends ethereum.Event {
  get params(): Redeemed__Params {
    return new Redeemed__Params(this);
  }
}

export class Redeemed__Params {
  _event: Redeemed;

  constructor(event: Redeemed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get collateral(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class StrategyAllowanceDecreased extends ethereum.Event {
  get params(): StrategyAllowanceDecreased__Params {
    return new StrategyAllowanceDecreased__Params(this);
  }
}

export class StrategyAllowanceDecreased__Params {
  _event: StrategyAllowanceDecreased;

  constructor(event: StrategyAllowanceDecreased) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StrategyAllowanceIncreased extends ethereum.Event {
  get params(): StrategyAllowanceIncreased__Params {
    return new StrategyAllowanceIncreased__Params(this);
  }
}

export class StrategyAllowanceIncreased__Params {
  _event: StrategyAllowanceIncreased;

  constructor(event: StrategyAllowanceIncreased) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class StrategyClosed extends ethereum.Event {
  get params(): StrategyClosed__Params {
    return new StrategyClosed__Params(this);
  }
}

export class StrategyClosed__Params {
  _event: StrategyClosed;

  constructor(event: StrategyClosed) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StrategyExecuted extends ethereum.Event {
  get params(): StrategyExecuted__Params {
    return new StrategyExecuted__Params(this);
  }
}

export class StrategyExecuted__Params {
  _event: StrategyExecuted;

  constructor(event: StrategyExecuted) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StrategyRemoved extends ethereum.Event {
  get params(): StrategyRemoved__Params {
    return new StrategyRemoved__Params(this);
  }
}

export class StrategyRemoved__Params {
  _event: StrategyRemoved;

  constructor(event: StrategyRemoved) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class StrategySet extends ethereum.Event {
  get params(): StrategySet__Params {
    return new StrategySet__Params(this);
  }
}

export class StrategySet__Params {
  _event: StrategySet;

  constructor(event: StrategySet) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get allowance(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class ToStrategy extends ethereum.Event {
  get params(): ToStrategy__Params {
    return new ToStrategy__Params(this);
  }
}

export class ToStrategy__Params {
  _event: ToStrategy;

  constructor(event: ToStrategy) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get strategy(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get token(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class AdminChanged extends ethereum.Event {
  get params(): AdminChanged__Params {
    return new AdminChanged__Params(this);
  }
}

export class AdminChanged__Params {
  _event: AdminChanged;

  constructor(event: AdminChanged) {
    this._event = event;
  }

  get previousAdmin(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newAdmin(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Upgraded extends ethereum.Event {
  get params(): Upgraded__Params {
    return new Upgraded__Params(this);
  }
}

export class Upgraded__Params {
  _event: Upgraded;

  constructor(event: Upgraded) {
    this._event = event;
  }

  get implementation(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class oneToken__assetsResult {
  value0: Address;
  value1: Address;

  constructor(value0: Address, value1: Address) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromAddress(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    return map;
  }
}

export class oneToken__balancesResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class oneToken__getHoldingsResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class oneToken__getMintingRatioResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class oneToken__updateMintingRatioResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class oneToken extends ethereum.SmartContract {
  static bind(address: Address): oneToken {
    return new oneToken("oneToken", address);
  }

  MODULE_TYPE(): Bytes {
    let result = super.call("MODULE_TYPE", "MODULE_TYPE():(bytes32)", []);

    return result[0].toBytes();
  }

  try_MODULE_TYPE(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("MODULE_TYPE", "MODULE_TYPE():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  assetAtIndex(index: BigInt): Address {
    let result = super.call("assetAtIndex", "assetAtIndex(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(index)
    ]);

    return result[0].toAddress();
  }

  try_assetAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "assetAtIndex",
      "assetAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  assetCount(): BigInt {
    let result = super.call("assetCount", "assetCount():(uint256)", []);

    return result[0].toBigInt();
  }

  try_assetCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("assetCount", "assetCount():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  assets(param0: Address): oneToken__assetsResult {
    let result = super.call("assets", "assets(address):(address,address)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new oneToken__assetsResult(
      result[0].toAddress(),
      result[1].toAddress()
    );
  }

  try_assets(param0: Address): ethereum.CallResult<oneToken__assetsResult> {
    let result = super.tryCall("assets", "assets(address):(address,address)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new oneToken__assetsResult(value[0].toAddress(), value[1].toAddress())
    );
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  balances(token: Address): oneToken__balancesResult {
    let result = super.call("balances", "balances(address):(uint256,uint256)", [
      ethereum.Value.fromAddress(token)
    ]);

    return new oneToken__balancesResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_balances(token: Address): ethereum.CallResult<oneToken__balancesResult> {
    let result = super.tryCall(
      "balances",
      "balances(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new oneToken__balancesResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  collateralTokenAtIndex(index: BigInt): Address {
    let result = super.call(
      "collateralTokenAtIndex",
      "collateralTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_collateralTokenAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "collateralTokenAtIndex",
      "collateralTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  collateralTokenCount(): BigInt {
    let result = super.call(
      "collateralTokenCount",
      "collateralTokenCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_collateralTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "collateralTokenCount",
      "collateralTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  controller(): Address {
    let result = super.call("controller", "controller():(address)", []);

    return result[0].toAddress();
  }

  try_controller(): ethereum.CallResult<Address> {
    let result = super.tryCall("controller", "controller():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  decreaseAllowance(spender: Address, subtractedValue: BigInt): boolean {
    let result = super.call(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_decreaseAllowance(
    spender: Address,
    subtractedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "decreaseAllowance",
      "decreaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(subtractedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getHoldings(token: Address): oneToken__getHoldingsResult {
    let result = super.call(
      "getHoldings",
      "getHoldings(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );

    return new oneToken__getHoldingsResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getHoldings(
    token: Address
  ): ethereum.CallResult<oneToken__getHoldingsResult> {
    let result = super.tryCall(
      "getHoldings",
      "getHoldings(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(token)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new oneToken__getHoldingsResult(value[0].toBigInt(), value[1].toBigInt())
    );
  }

  getMintingRatio(collateralToken: Address): oneToken__getMintingRatioResult {
    let result = super.call(
      "getMintingRatio",
      "getMintingRatio(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(collateralToken)]
    );

    return new oneToken__getMintingRatioResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_getMintingRatio(
    collateralToken: Address
  ): ethereum.CallResult<oneToken__getMintingRatioResult> {
    let result = super.tryCall(
      "getMintingRatio",
      "getMintingRatio(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(collateralToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new oneToken__getMintingRatioResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  increaseAllowance(spender: Address, addedValue: BigInt): boolean {
    let result = super.call(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );

    return result[0].toBoolean();
  }

  try_increaseAllowance(
    spender: Address,
    addedValue: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "increaseAllowance",
      "increaseAllowance(address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(spender),
        ethereum.Value.fromUnsignedBigInt(addedValue)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isAsset(token: Address): boolean {
    let result = super.call("isAsset", "isAsset(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isAsset(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isAsset", "isAsset(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isCollateral(token: Address): boolean {
    let result = super.call("isCollateral", "isCollateral(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isCollateral(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isCollateral", "isCollateral(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isOtherToken(token: Address): boolean {
    let result = super.call("isOtherToken", "isOtherToken(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);

    return result[0].toBoolean();
  }

  try_isOtherToken(token: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isOtherToken", "isOtherToken(address):(bool)", [
      ethereum.Value.fromAddress(token)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liabilities(param0: Address): BigInt {
    let result = super.call("liabilities", "liabilities(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_liabilities(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liabilities",
      "liabilities(address):(uint256)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  memberToken(): Address {
    let result = super.call("memberToken", "memberToken():(address)", []);

    return result[0].toAddress();
  }

  try_memberToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("memberToken", "memberToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintMaster(): Address {
    let result = super.call("mintMaster", "mintMaster():(address)", []);

    return result[0].toAddress();
  }

  try_mintMaster(): ethereum.CallResult<Address> {
    let result = super.tryCall("mintMaster", "mintMaster():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  mintingFee(): BigInt {
    let result = super.call("mintingFee", "mintingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_mintingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("mintingFee", "mintingFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  oneTokenFactory(): Address {
    let result = super.call(
      "oneTokenFactory",
      "oneTokenFactory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_oneTokenFactory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "oneTokenFactory",
      "oneTokenFactory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  otherTokenAtIndex(index: BigInt): Address {
    let result = super.call(
      "otherTokenAtIndex",
      "otherTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );

    return result[0].toAddress();
  }

  try_otherTokenAtIndex(index: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "otherTokenAtIndex",
      "otherTokenAtIndex(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(index)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  otherTokenCount(): BigInt {
    let result = super.call(
      "otherTokenCount",
      "otherTokenCount():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_otherTokenCount(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "otherTokenCount",
      "otherTokenCount():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redemptionFee(): BigInt {
    let result = super.call("redemptionFee", "redemptionFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_redemptionFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redemptionFee",
      "redemptionFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(recipient: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(recipient),
      ethereum.Value.fromUnsignedBigInt(amount)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(sender: Address, recipient: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    sender: Address,
    recipient: Address,
    amount: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(sender),
        ethereum.Value.fromAddress(recipient),
        ethereum.Value.fromUnsignedBigInt(amount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  updateMintingRatio(
    collateralToken: Address
  ): oneToken__updateMintingRatioResult {
    let result = super.call(
      "updateMintingRatio",
      "updateMintingRatio(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(collateralToken)]
    );

    return new oneToken__updateMintingRatioResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_updateMintingRatio(
    collateralToken: Address
  ): ethereum.CallResult<oneToken__updateMintingRatioResult> {
    let result = super.tryCall(
      "updateMintingRatio",
      "updateMintingRatio(address):(uint256,uint256)",
      [ethereum.Value.fromAddress(collateralToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new oneToken__updateMintingRatioResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  implementation(): Address {
    let result = super.call("implementation", "implementation():(address)", []);

    return result[0].toAddress();
  }

  try_implementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "implementation",
      "implementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class AddAssetCall extends ethereum.Call {
  get inputs(): AddAssetCall__Inputs {
    return new AddAssetCall__Inputs(this);
  }

  get outputs(): AddAssetCall__Outputs {
    return new AddAssetCall__Outputs(this);
  }
}

export class AddAssetCall__Inputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oracle(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AddAssetCall__Outputs {
  _call: AddAssetCall;

  constructor(call: AddAssetCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class BurnCall extends ethereum.Call {
  get inputs(): BurnCall__Inputs {
    return new BurnCall__Inputs(this);
  }

  get outputs(): BurnCall__Outputs {
    return new BurnCall__Outputs(this);
  }
}

export class BurnCall__Inputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class BurnCall__Outputs {
  _call: BurnCall;

  constructor(call: BurnCall) {
    this._call = call;
  }
}

export class BurnFromCall extends ethereum.Call {
  get inputs(): BurnFromCall__Inputs {
    return new BurnFromCall__Inputs(this);
  }

  get outputs(): BurnFromCall__Outputs {
    return new BurnFromCall__Outputs(this);
  }
}

export class BurnFromCall__Inputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BurnFromCall__Outputs {
  _call: BurnFromCall;

  constructor(call: BurnFromCall) {
    this._call = call;
  }
}

export class ChangeControllerCall extends ethereum.Call {
  get inputs(): ChangeControllerCall__Inputs {
    return new ChangeControllerCall__Inputs(this);
  }

  get outputs(): ChangeControllerCall__Outputs {
    return new ChangeControllerCall__Outputs(this);
  }
}

export class ChangeControllerCall__Inputs {
  _call: ChangeControllerCall;

  constructor(call: ChangeControllerCall) {
    this._call = call;
  }

  get controller_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeControllerCall__Outputs {
  _call: ChangeControllerCall;

  constructor(call: ChangeControllerCall) {
    this._call = call;
  }
}

export class ChangeMintMasterCall extends ethereum.Call {
  get inputs(): ChangeMintMasterCall__Inputs {
    return new ChangeMintMasterCall__Inputs(this);
  }

  get outputs(): ChangeMintMasterCall__Outputs {
    return new ChangeMintMasterCall__Outputs(this);
  }
}

export class ChangeMintMasterCall__Inputs {
  _call: ChangeMintMasterCall;

  constructor(call: ChangeMintMasterCall) {
    this._call = call;
  }

  get mintMaster_(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oneTokenOracle_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class ChangeMintMasterCall__Outputs {
  _call: ChangeMintMasterCall;

  constructor(call: ChangeMintMasterCall) {
    this._call = call;
  }
}

export class CloseStrategyCall extends ethereum.Call {
  get inputs(): CloseStrategyCall__Inputs {
    return new CloseStrategyCall__Inputs(this);
  }

  get outputs(): CloseStrategyCall__Outputs {
    return new CloseStrategyCall__Outputs(this);
  }
}

export class CloseStrategyCall__Inputs {
  _call: CloseStrategyCall;

  constructor(call: CloseStrategyCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CloseStrategyCall__Outputs {
  _call: CloseStrategyCall;

  constructor(call: CloseStrategyCall) {
    this._call = call;
  }
}

export class DecreaseAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseAllowanceCall__Inputs {
    return new DecreaseAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseAllowanceCall__Outputs {
    return new DecreaseAllowanceCall__Outputs(this);
  }
}

export class DecreaseAllowanceCall__Inputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get subtractedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseAllowanceCall__Outputs {
  _call: DecreaseAllowanceCall;

  constructor(call: DecreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DecreaseStrategyAllowanceCall extends ethereum.Call {
  get inputs(): DecreaseStrategyAllowanceCall__Inputs {
    return new DecreaseStrategyAllowanceCall__Inputs(this);
  }

  get outputs(): DecreaseStrategyAllowanceCall__Outputs {
    return new DecreaseStrategyAllowanceCall__Outputs(this);
  }
}

export class DecreaseStrategyAllowanceCall__Inputs {
  _call: DecreaseStrategyAllowanceCall;

  constructor(call: DecreaseStrategyAllowanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DecreaseStrategyAllowanceCall__Outputs {
  _call: DecreaseStrategyAllowanceCall;

  constructor(call: DecreaseStrategyAllowanceCall) {
    this._call = call;
  }
}

export class ExecuteStrategyCall extends ethereum.Call {
  get inputs(): ExecuteStrategyCall__Inputs {
    return new ExecuteStrategyCall__Inputs(this);
  }

  get outputs(): ExecuteStrategyCall__Outputs {
    return new ExecuteStrategyCall__Outputs(this);
  }
}

export class ExecuteStrategyCall__Inputs {
  _call: ExecuteStrategyCall;

  constructor(call: ExecuteStrategyCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExecuteStrategyCall__Outputs {
  _call: ExecuteStrategyCall;

  constructor(call: ExecuteStrategyCall) {
    this._call = call;
  }
}

export class FromStrategyCall extends ethereum.Call {
  get inputs(): FromStrategyCall__Inputs {
    return new FromStrategyCall__Inputs(this);
  }

  get outputs(): FromStrategyCall__Outputs {
    return new FromStrategyCall__Outputs(this);
  }
}

export class FromStrategyCall__Inputs {
  _call: FromStrategyCall;

  constructor(call: FromStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class FromStrategyCall__Outputs {
  _call: FromStrategyCall;

  constructor(call: FromStrategyCall) {
    this._call = call;
  }
}

export class IncreaseAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseAllowanceCall__Inputs {
    return new IncreaseAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseAllowanceCall__Outputs {
    return new IncreaseAllowanceCall__Outputs(this);
  }
}

export class IncreaseAllowanceCall__Inputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get addedValue(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseAllowanceCall__Outputs {
  _call: IncreaseAllowanceCall;

  constructor(call: IncreaseAllowanceCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class IncreaseStrategyAllowanceCall extends ethereum.Call {
  get inputs(): IncreaseStrategyAllowanceCall__Inputs {
    return new IncreaseStrategyAllowanceCall__Inputs(this);
  }

  get outputs(): IncreaseStrategyAllowanceCall__Outputs {
    return new IncreaseStrategyAllowanceCall__Outputs(this);
  }
}

export class IncreaseStrategyAllowanceCall__Inputs {
  _call: IncreaseStrategyAllowanceCall;

  constructor(call: IncreaseStrategyAllowanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class IncreaseStrategyAllowanceCall__Outputs {
  _call: IncreaseStrategyAllowanceCall;

  constructor(call: IncreaseStrategyAllowanceCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get name_(): string {
    return this._call.inputValues[0].value.toString();
  }

  get symbol_(): string {
    return this._call.inputValues[1].value.toString();
  }

  get oneTokenOracle_(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get controller_(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get mintMaster_(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get memberToken_(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get collateral_(): Address {
    return this._call.inputValues[6].value.toAddress();
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get oneTokens(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RedeemCall extends ethereum.Call {
  get inputs(): RedeemCall__Inputs {
    return new RedeemCall__Inputs(this);
  }

  get outputs(): RedeemCall__Outputs {
    return new RedeemCall__Outputs(this);
  }
}

export class RedeemCall__Inputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }

  get collateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RedeemCall__Outputs {
  _call: RedeemCall;

  constructor(call: RedeemCall) {
    this._call = call;
  }
}

export class RemoveAssetCall extends ethereum.Call {
  get inputs(): RemoveAssetCall__Inputs {
    return new RemoveAssetCall__Inputs(this);
  }

  get outputs(): RemoveAssetCall__Outputs {
    return new RemoveAssetCall__Outputs(this);
  }
}

export class RemoveAssetCall__Inputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveAssetCall__Outputs {
  _call: RemoveAssetCall;

  constructor(call: RemoveAssetCall) {
    this._call = call;
  }
}

export class RemoveStrategyCall extends ethereum.Call {
  get inputs(): RemoveStrategyCall__Inputs {
    return new RemoveStrategyCall__Inputs(this);
  }

  get outputs(): RemoveStrategyCall__Outputs {
    return new RemoveStrategyCall__Outputs(this);
  }
}

export class RemoveStrategyCall__Inputs {
  _call: RemoveStrategyCall;

  constructor(call: RemoveStrategyCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveStrategyCall__Outputs {
  _call: RemoveStrategyCall;

  constructor(call: RemoveStrategyCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetFactoryCall extends ethereum.Call {
  get inputs(): SetFactoryCall__Inputs {
    return new SetFactoryCall__Inputs(this);
  }

  get outputs(): SetFactoryCall__Outputs {
    return new SetFactoryCall__Outputs(this);
  }
}

export class SetFactoryCall__Inputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }

  get newFactory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFactoryCall__Outputs {
  _call: SetFactoryCall;

  constructor(call: SetFactoryCall) {
    this._call = call;
  }
}

export class SetMintingFeeCall extends ethereum.Call {
  get inputs(): SetMintingFeeCall__Inputs {
    return new SetMintingFeeCall__Inputs(this);
  }

  get outputs(): SetMintingFeeCall__Outputs {
    return new SetMintingFeeCall__Outputs(this);
  }
}

export class SetMintingFeeCall__Inputs {
  _call: SetMintingFeeCall;

  constructor(call: SetMintingFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetMintingFeeCall__Outputs {
  _call: SetMintingFeeCall;

  constructor(call: SetMintingFeeCall) {
    this._call = call;
  }
}

export class SetRedemptionFeeCall extends ethereum.Call {
  get inputs(): SetRedemptionFeeCall__Inputs {
    return new SetRedemptionFeeCall__Inputs(this);
  }

  get outputs(): SetRedemptionFeeCall__Outputs {
    return new SetRedemptionFeeCall__Outputs(this);
  }
}

export class SetRedemptionFeeCall__Inputs {
  _call: SetRedemptionFeeCall;

  constructor(call: SetRedemptionFeeCall) {
    this._call = call;
  }

  get fee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetRedemptionFeeCall__Outputs {
  _call: SetRedemptionFeeCall;

  constructor(call: SetRedemptionFeeCall) {
    this._call = call;
  }
}

export class SetStrategyCall extends ethereum.Call {
  get inputs(): SetStrategyCall__Inputs {
    return new SetStrategyCall__Inputs(this);
  }

  get outputs(): SetStrategyCall__Outputs {
    return new SetStrategyCall__Outputs(this);
  }
}

export class SetStrategyCall__Inputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get strategy(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get allowance(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class SetStrategyCall__Outputs {
  _call: SetStrategyCall;

  constructor(call: SetStrategyCall) {
    this._call = call;
  }
}

export class ToStrategyCall extends ethereum.Call {
  get inputs(): ToStrategyCall__Inputs {
    return new ToStrategyCall__Inputs(this);
  }

  get outputs(): ToStrategyCall__Outputs {
    return new ToStrategyCall__Outputs(this);
  }
}

export class ToStrategyCall__Inputs {
  _call: ToStrategyCall;

  constructor(call: ToStrategyCall) {
    this._call = call;
  }

  get strategy(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get token(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class ToStrategyCall__Outputs {
  _call: ToStrategyCall;

  constructor(call: ToStrategyCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get recipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get sender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get recipient(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateMintingRatioCall extends ethereum.Call {
  get inputs(): UpdateMintingRatioCall__Inputs {
    return new UpdateMintingRatioCall__Inputs(this);
  }

  get outputs(): UpdateMintingRatioCall__Outputs {
    return new UpdateMintingRatioCall__Outputs(this);
  }
}

export class UpdateMintingRatioCall__Inputs {
  _call: UpdateMintingRatioCall;

  constructor(call: UpdateMintingRatioCall) {
    this._call = call;
  }

  get collateralToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateMintingRatioCall__Outputs {
  _call: UpdateMintingRatioCall;

  constructor(call: UpdateMintingRatioCall) {
    this._call = call;
  }

  get ratio(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }

  get maxOrderVolume(): BigInt {
    return this._call.outputValues[1].value.toBigInt();
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _logic(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get admin_(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _data(): Bytes {
    return this._call.inputValues[2].value.toBytes();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AdminCall extends ethereum.Call {
  get inputs(): AdminCall__Inputs {
    return new AdminCall__Inputs(this);
  }

  get outputs(): AdminCall__Outputs {
    return new AdminCall__Outputs(this);
  }
}

export class AdminCall__Inputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }
}

export class AdminCall__Outputs {
  _call: AdminCall;

  constructor(call: AdminCall) {
    this._call = call;
  }

  get admin_(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall extends ethereum.Call {
  get inputs(): ChangeAdminCall__Inputs {
    return new ChangeAdminCall__Inputs(this);
  }

  get outputs(): ChangeAdminCall__Outputs {
    return new ChangeAdminCall__Outputs(this);
  }
}

export class ChangeAdminCall__Inputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }

  get newAdmin(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ChangeAdminCall__Outputs {
  _call: ChangeAdminCall;

  constructor(call: ChangeAdminCall) {
    this._call = call;
  }
}

export class ImplementationCall extends ethereum.Call {
  get inputs(): ImplementationCall__Inputs {
    return new ImplementationCall__Inputs(this);
  }

  get outputs(): ImplementationCall__Outputs {
    return new ImplementationCall__Outputs(this);
  }
}

export class ImplementationCall__Inputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }
}

export class ImplementationCall__Outputs {
  _call: ImplementationCall;

  constructor(call: ImplementationCall) {
    this._call = call;
  }

  get implementation_(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class UpgradeToCall extends ethereum.Call {
  get inputs(): UpgradeToCall__Inputs {
    return new UpgradeToCall__Inputs(this);
  }

  get outputs(): UpgradeToCall__Outputs {
    return new UpgradeToCall__Outputs(this);
  }
}

export class UpgradeToCall__Inputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpgradeToCall__Outputs {
  _call: UpgradeToCall;

  constructor(call: UpgradeToCall) {
    this._call = call;
  }
}

export class UpgradeToAndCallCall extends ethereum.Call {
  get inputs(): UpgradeToAndCallCall__Inputs {
    return new UpgradeToAndCallCall__Inputs(this);
  }

  get outputs(): UpgradeToAndCallCall__Outputs {
    return new UpgradeToAndCallCall__Outputs(this);
  }
}

export class UpgradeToAndCallCall__Inputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }

  get newImplementation(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get data(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }
}

export class UpgradeToAndCallCall__Outputs {
  _call: UpgradeToAndCallCall;

  constructor(call: UpgradeToAndCallCall) {
    this._call = call;
  }
}
