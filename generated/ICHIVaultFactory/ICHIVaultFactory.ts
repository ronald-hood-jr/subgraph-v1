// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class BaseFee extends ethereum.Event {
  get params(): BaseFee__Params {
    return new BaseFee__Params(this);
  }
}

export class BaseFee__Params {
  _event: BaseFee;

  constructor(event: BaseFee) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseFee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class BaseFeeSplit extends ethereum.Event {
  get params(): BaseFeeSplit__Params {
    return new BaseFeeSplit__Params(this);
  }
}

export class BaseFeeSplit__Params {
  _event: BaseFeeSplit;

  constructor(event: BaseFeeSplit) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get baseFeeSplit(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DeployICHIVaultFactory extends ethereum.Event {
  get params(): DeployICHIVaultFactory__Params {
    return new DeployICHIVaultFactory__Params(this);
  }
}

export class DeployICHIVaultFactory__Params {
  _event: DeployICHIVaultFactory;

  constructor(event: DeployICHIVaultFactory) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get uniswapV3Factory(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class FeeRecipient extends ethereum.Event {
  get params(): FeeRecipient__Params {
    return new FeeRecipient__Params(this);
  }
}

export class FeeRecipient__Params {
  _event: FeeRecipient;

  constructor(event: FeeRecipient) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get feeRecipient(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ICHIVaultCreated extends ethereum.Event {
  get params(): ICHIVaultCreated__Params {
    return new ICHIVaultCreated__Params(this);
  }
}

export class ICHIVaultCreated__Params {
  _event: ICHIVaultCreated;

  constructor(event: ICHIVaultCreated) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get ichiVault(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get tokenA(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get allowTokenA(): boolean {
    return this._event.parameters[3].value.toBoolean();
  }

  get tokenB(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get allowTokenB(): boolean {
    return this._event.parameters[5].value.toBoolean();
  }

  get fee(): i32 {
    return this._event.parameters[6].value.toI32();
  }

  get count(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class ICHIVaultFactory extends ethereum.SmartContract {
  static bind(address: Address): ICHIVaultFactory {
    return new ICHIVaultFactory("ICHIVaultFactory", address);
  }

  allVaults(param0: BigInt): Address {
    let result = super.call("allVaults", "allVaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allVaults(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allVaults", "allVaults(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  baseFee(): BigInt {
    let result = super.call("baseFee", "baseFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseFee", "baseFee():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  baseFeeSplit(): BigInt {
    let result = super.call("baseFeeSplit", "baseFeeSplit():(uint256)", []);

    return result[0].toBigInt();
  }

  try_baseFeeSplit(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("baseFeeSplit", "baseFeeSplit():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  createICHIVault(
    tokenA: Address,
    allowTokenA: boolean,
    tokenB: Address,
    allowTokenB: boolean,
    fee: i32
  ): Address {
    let result = super.call(
      "createICHIVault",
      "createICHIVault(address,bool,address,bool,uint24):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromBoolean(allowTokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(allowTokenB),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fee))
      ]
    );

    return result[0].toAddress();
  }

  try_createICHIVault(
    tokenA: Address,
    allowTokenA: boolean,
    tokenB: Address,
    allowTokenB: boolean,
    fee: i32
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "createICHIVault",
      "createICHIVault(address,bool,address,bool,uint24):(address)",
      [
        ethereum.Value.fromAddress(tokenA),
        ethereum.Value.fromBoolean(allowTokenA),
        ethereum.Value.fromAddress(tokenB),
        ethereum.Value.fromBoolean(allowTokenB),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fee))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  feeRecipient(): Address {
    let result = super.call("feeRecipient", "feeRecipient():(address)", []);

    return result[0].toAddress();
  }

  try_feeRecipient(): ethereum.CallResult<Address> {
    let result = super.tryCall("feeRecipient", "feeRecipient():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  genKey(
    deployer: Address,
    token0: Address,
    token1: Address,
    fee: i32,
    allowToken0: boolean,
    allowToken1: boolean
  ): Bytes {
    let result = super.call(
      "genKey",
      "genKey(address,address,address,uint24,bool,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(deployer),
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fee)),
        ethereum.Value.fromBoolean(allowToken0),
        ethereum.Value.fromBoolean(allowToken1)
      ]
    );

    return result[0].toBytes();
  }

  try_genKey(
    deployer: Address,
    token0: Address,
    token1: Address,
    fee: i32,
    allowToken0: boolean,
    allowToken1: boolean
  ): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "genKey",
      "genKey(address,address,address,uint24,bool,bool):(bytes32)",
      [
        ethereum.Value.fromAddress(deployer),
        ethereum.Value.fromAddress(token0),
        ethereum.Value.fromAddress(token1),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(fee)),
        ethereum.Value.fromBoolean(allowToken0),
        ethereum.Value.fromBoolean(allowToken1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getICHIVault(param0: Bytes): Address {
    let result = super.call("getICHIVault", "getICHIVault(bytes32):(address)", [
      ethereum.Value.fromFixedBytes(param0)
    ]);

    return result[0].toAddress();
  }

  try_getICHIVault(param0: Bytes): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getICHIVault",
      "getICHIVault(bytes32):(address)",
      [ethereum.Value.fromFixedBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  uniswapV3Factory(): Address {
    let result = super.call(
      "uniswapV3Factory",
      "uniswapV3Factory():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_uniswapV3Factory(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "uniswapV3Factory",
      "uniswapV3Factory():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _uniswapV3Factory(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class CreateICHIVaultCall extends ethereum.Call {
  get inputs(): CreateICHIVaultCall__Inputs {
    return new CreateICHIVaultCall__Inputs(this);
  }

  get outputs(): CreateICHIVaultCall__Outputs {
    return new CreateICHIVaultCall__Outputs(this);
  }
}

export class CreateICHIVaultCall__Inputs {
  _call: CreateICHIVaultCall;

  constructor(call: CreateICHIVaultCall) {
    this._call = call;
  }

  get tokenA(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get allowTokenA(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }

  get tokenB(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get allowTokenB(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get fee(): i32 {
    return this._call.inputValues[4].value.toI32();
  }
}

export class CreateICHIVaultCall__Outputs {
  _call: CreateICHIVaultCall;

  constructor(call: CreateICHIVaultCall) {
    this._call = call;
  }

  get ichiVault(): Address {
    return this._call.outputValues[0].value.toAddress();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetBaseFeeCall extends ethereum.Call {
  get inputs(): SetBaseFeeCall__Inputs {
    return new SetBaseFeeCall__Inputs(this);
  }

  get outputs(): SetBaseFeeCall__Outputs {
    return new SetBaseFeeCall__Outputs(this);
  }
}

export class SetBaseFeeCall__Inputs {
  _call: SetBaseFeeCall;

  constructor(call: SetBaseFeeCall) {
    this._call = call;
  }

  get _baseFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBaseFeeCall__Outputs {
  _call: SetBaseFeeCall;

  constructor(call: SetBaseFeeCall) {
    this._call = call;
  }
}

export class SetBaseFeeSplitCall extends ethereum.Call {
  get inputs(): SetBaseFeeSplitCall__Inputs {
    return new SetBaseFeeSplitCall__Inputs(this);
  }

  get outputs(): SetBaseFeeSplitCall__Outputs {
    return new SetBaseFeeSplitCall__Outputs(this);
  }
}

export class SetBaseFeeSplitCall__Inputs {
  _call: SetBaseFeeSplitCall;

  constructor(call: SetBaseFeeSplitCall) {
    this._call = call;
  }

  get _baseFeeSplit(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetBaseFeeSplitCall__Outputs {
  _call: SetBaseFeeSplitCall;

  constructor(call: SetBaseFeeSplitCall) {
    this._call = call;
  }
}

export class SetFeeRecipientCall extends ethereum.Call {
  get inputs(): SetFeeRecipientCall__Inputs {
    return new SetFeeRecipientCall__Inputs(this);
  }

  get outputs(): SetFeeRecipientCall__Outputs {
    return new SetFeeRecipientCall__Outputs(this);
  }
}

export class SetFeeRecipientCall__Inputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }

  get _feeRecipient(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetFeeRecipientCall__Outputs {
  _call: SetFeeRecipientCall;

  constructor(call: SetFeeRecipientCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
