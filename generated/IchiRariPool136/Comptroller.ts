// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ActionPaused extends ethereum.Event {
  get params(): ActionPaused__Params {
    return new ActionPaused__Params(this);
  }
}

export class ActionPaused__Params {
  _event: ActionPaused;

  constructor(event: ActionPaused) {
    this._event = event;
  }

  get action(): string {
    return this._event.parameters[0].value.toString();
  }

  get pauseState(): boolean {
    return this._event.parameters[1].value.toBoolean();
  }
}

export class ActionPaused1 extends ethereum.Event {
  get params(): ActionPaused1__Params {
    return new ActionPaused1__Params(this);
  }
}

export class ActionPaused1__Params {
  _event: ActionPaused1;

  constructor(event: ActionPaused1) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get action(): string {
    return this._event.parameters[1].value.toString();
  }

  get pauseState(): boolean {
    return this._event.parameters[2].value.toBoolean();
  }
}

export class AddedRewardsDistributor extends ethereum.Event {
  get params(): AddedRewardsDistributor__Params {
    return new AddedRewardsDistributor__Params(this);
  }
}

export class AddedRewardsDistributor__Params {
  _event: AddedRewardsDistributor;

  constructor(event: AddedRewardsDistributor) {
    this._event = event;
  }

  get rewardsDistributor(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class AutoImplementationsToggled extends ethereum.Event {
  get params(): AutoImplementationsToggled__Params {
    return new AutoImplementationsToggled__Params(this);
  }
}

export class AutoImplementationsToggled__Params {
  _event: AutoImplementationsToggled;

  constructor(event: AutoImplementationsToggled) {
    this._event = event;
  }

  get enabled(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Failure extends ethereum.Event {
  get params(): Failure__Params {
    return new Failure__Params(this);
  }
}

export class Failure__Params {
  _event: Failure;

  constructor(event: Failure) {
    this._event = event;
  }

  get error(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get info(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get detail(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class MarketEntered extends ethereum.Event {
  get params(): MarketEntered__Params {
    return new MarketEntered__Params(this);
  }
}

export class MarketEntered__Params {
  _event: MarketEntered;

  constructor(event: MarketEntered) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketExited extends ethereum.Event {
  get params(): MarketExited__Params {
    return new MarketExited__Params(this);
  }
}

export class MarketExited__Params {
  _event: MarketExited;

  constructor(event: MarketExited) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get account(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MarketListed extends ethereum.Event {
  get params(): MarketListed__Params {
    return new MarketListed__Params(this);
  }
}

export class MarketListed__Params {
  _event: MarketListed;

  constructor(event: MarketListed) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class MarketUnlisted extends ethereum.Event {
  get params(): MarketUnlisted__Params {
    return new MarketUnlisted__Params(this);
  }
}

export class MarketUnlisted__Params {
  _event: MarketUnlisted;

  constructor(event: MarketUnlisted) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class NewBorrowCap extends ethereum.Event {
  get params(): NewBorrowCap__Params {
    return new NewBorrowCap__Params(this);
  }
}

export class NewBorrowCap__Params {
  _event: NewBorrowCap;

  constructor(event: NewBorrowCap) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBorrowCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewBorrowCapGuardian extends ethereum.Event {
  get params(): NewBorrowCapGuardian__Params {
    return new NewBorrowCapGuardian__Params(this);
  }
}

export class NewBorrowCapGuardian__Params {
  _event: NewBorrowCapGuardian;

  constructor(event: NewBorrowCapGuardian) {
    this._event = event;
  }

  get oldBorrowCapGuardian(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newBorrowCapGuardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewCloseFactor extends ethereum.Event {
  get params(): NewCloseFactor__Params {
    return new NewCloseFactor__Params(this);
  }
}

export class NewCloseFactor__Params {
  _event: NewCloseFactor;

  constructor(event: NewCloseFactor) {
    this._event = event;
  }

  get oldCloseFactorMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newCloseFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewCollateralFactor extends ethereum.Event {
  get params(): NewCollateralFactor__Params {
    return new NewCollateralFactor__Params(this);
  }
}

export class NewCollateralFactor__Params {
  _event: NewCollateralFactor;

  constructor(event: NewCollateralFactor) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get oldCollateralFactorMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class NewLiquidationIncentive extends ethereum.Event {
  get params(): NewLiquidationIncentive__Params {
    return new NewLiquidationIncentive__Params(this);
  }
}

export class NewLiquidationIncentive__Params {
  _event: NewLiquidationIncentive;

  constructor(event: NewLiquidationIncentive) {
    this._event = event;
  }

  get oldLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class NewPauseGuardian extends ethereum.Event {
  get params(): NewPauseGuardian__Params {
    return new NewPauseGuardian__Params(this);
  }
}

export class NewPauseGuardian__Params {
  _event: NewPauseGuardian;

  constructor(event: NewPauseGuardian) {
    this._event = event;
  }

  get oldPauseGuardian(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPauseGuardian(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewPriceOracle extends ethereum.Event {
  get params(): NewPriceOracle__Params {
    return new NewPriceOracle__Params(this);
  }
}

export class NewPriceOracle__Params {
  _event: NewPriceOracle;

  constructor(event: NewPriceOracle) {
    this._event = event;
  }

  get oldPriceOracle(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newPriceOracle(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class NewSupplyCap extends ethereum.Event {
  get params(): NewSupplyCap__Params {
    return new NewSupplyCap__Params(this);
  }
}

export class NewSupplyCap__Params {
  _event: NewSupplyCap;

  constructor(event: NewSupplyCap) {
    this._event = event;
  }

  get cToken(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newSupplyCap(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WhitelistEnforcementChanged extends ethereum.Event {
  get params(): WhitelistEnforcementChanged__Params {
    return new WhitelistEnforcementChanged__Params(this);
  }
}

export class WhitelistEnforcementChanged__Params {
  _event: WhitelistEnforcementChanged;

  constructor(event: WhitelistEnforcementChanged) {
    this._event = event;
  }

  get enforce(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class Comptroller__getAccountLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Comptroller__getHypotheticalAccountLiquidityResult {
  value0: BigInt;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: BigInt, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }
}

export class Comptroller__liquidateCalculateSeizeTokensResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Comptroller__marketsResult {
  value0: boolean;
  value1: BigInt;

  constructor(value0: boolean, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }
}

export class Comptroller extends ethereum.SmartContract {
  static bind(address: Address): Comptroller {
    return new Comptroller("Comptroller", address);
  }

  _addRewardsDistributor(distributor: Address): BigInt {
    let result = super.call(
      "_addRewardsDistributor",
      "_addRewardsDistributor(address):(uint256)",
      [ethereum.Value.fromAddress(distributor)]
    );

    return result[0].toBigInt();
  }

  try__addRewardsDistributor(
    distributor: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_addRewardsDistributor",
      "_addRewardsDistributor(address):(uint256)",
      [ethereum.Value.fromAddress(distributor)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _borrowGuardianPaused(): boolean {
    let result = super.call(
      "_borrowGuardianPaused",
      "_borrowGuardianPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try__borrowGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_borrowGuardianPaused",
      "_borrowGuardianPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _deployMarket(
    isCEther: boolean,
    constructorData: Bytes,
    collateralFactorMantissa: BigInt
  ): BigInt {
    let result = super.call(
      "_deployMarket",
      "_deployMarket(bool,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(isCEther),
        ethereum.Value.fromBytes(constructorData),
        ethereum.Value.fromUnsignedBigInt(collateralFactorMantissa)
      ]
    );

    return result[0].toBigInt();
  }

  try__deployMarket(
    isCEther: boolean,
    constructorData: Bytes,
    collateralFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_deployMarket",
      "_deployMarket(bool,bytes,uint256):(uint256)",
      [
        ethereum.Value.fromBoolean(isCEther),
        ethereum.Value.fromBytes(constructorData),
        ethereum.Value.fromUnsignedBigInt(collateralFactorMantissa)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _mintGuardianPaused(): boolean {
    let result = super.call(
      "_mintGuardianPaused",
      "_mintGuardianPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try__mintGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_mintGuardianPaused",
      "_mintGuardianPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setBorrowPaused(cToken: Address, state: boolean): boolean {
    let result = super.call(
      "_setBorrowPaused",
      "_setBorrowPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );

    return result[0].toBoolean();
  }

  try__setBorrowPaused(
    cToken: Address,
    state: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setBorrowPaused",
      "_setBorrowPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setCloseFactor(newCloseFactorMantissa: BigInt): BigInt {
    let result = super.call(
      "_setCloseFactor",
      "_setCloseFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setCloseFactor(
    newCloseFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setCloseFactor",
      "_setCloseFactor(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newCloseFactorMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setCollateralFactor(
    cToken: Address,
    newCollateralFactorMantissa: BigInt
  ): BigInt {
    let result = super.call(
      "_setCollateralFactor",
      "_setCollateralFactor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa)
      ]
    );

    return result[0].toBigInt();
  }

  try__setCollateralFactor(
    cToken: Address,
    newCollateralFactorMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setCollateralFactor",
      "_setCollateralFactor(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(newCollateralFactorMantissa)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setLiquidationIncentive(newLiquidationIncentiveMantissa: BigInt): BigInt {
    let result = super.call(
      "_setLiquidationIncentive",
      "_setLiquidationIncentive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)]
    );

    return result[0].toBigInt();
  }

  try__setLiquidationIncentive(
    newLiquidationIncentiveMantissa: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setLiquidationIncentive",
      "_setLiquidationIncentive(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(newLiquidationIncentiveMantissa)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setMintPaused(cToken: Address, state: boolean): boolean {
    let result = super.call(
      "_setMintPaused",
      "_setMintPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );

    return result[0].toBoolean();
  }

  try__setMintPaused(
    cToken: Address,
    state: boolean
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setMintPaused",
      "_setMintPaused(address,bool):(bool)",
      [ethereum.Value.fromAddress(cToken), ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setPauseGuardian(newPauseGuardian: Address): BigInt {
    let result = super.call(
      "_setPauseGuardian",
      "_setPauseGuardian(address):(uint256)",
      [ethereum.Value.fromAddress(newPauseGuardian)]
    );

    return result[0].toBigInt();
  }

  try__setPauseGuardian(
    newPauseGuardian: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPauseGuardian",
      "_setPauseGuardian(address):(uint256)",
      [ethereum.Value.fromAddress(newPauseGuardian)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setPriceOracle(newOracle: Address): BigInt {
    let result = super.call(
      "_setPriceOracle",
      "_setPriceOracle(address):(uint256)",
      [ethereum.Value.fromAddress(newOracle)]
    );

    return result[0].toBigInt();
  }

  try__setPriceOracle(newOracle: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setPriceOracle",
      "_setPriceOracle(address):(uint256)",
      [ethereum.Value.fromAddress(newOracle)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setSeizePaused(state: boolean): boolean {
    let result = super.call("_setSeizePaused", "_setSeizePaused(bool):(bool)", [
      ethereum.Value.fromBoolean(state)
    ]);

    return result[0].toBoolean();
  }

  try__setSeizePaused(state: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setSeizePaused",
      "_setSeizePaused(bool):(bool)",
      [ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setTransferPaused(state: boolean): boolean {
    let result = super.call(
      "_setTransferPaused",
      "_setTransferPaused(bool):(bool)",
      [ethereum.Value.fromBoolean(state)]
    );

    return result[0].toBoolean();
  }

  try__setTransferPaused(state: boolean): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "_setTransferPaused",
      "_setTransferPaused(bool):(bool)",
      [ethereum.Value.fromBoolean(state)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  _setWhitelistEnforcement(enforce: boolean): BigInt {
    let result = super.call(
      "_setWhitelistEnforcement",
      "_setWhitelistEnforcement(bool):(uint256)",
      [ethereum.Value.fromBoolean(enforce)]
    );

    return result[0].toBigInt();
  }

  try__setWhitelistEnforcement(enforce: boolean): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setWhitelistEnforcement",
      "_setWhitelistEnforcement(bool):(uint256)",
      [ethereum.Value.fromBoolean(enforce)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _setWhitelistStatuses(
    suppliers: Array<Address>,
    statuses: Array<boolean>
  ): BigInt {
    let result = super.call(
      "_setWhitelistStatuses",
      "_setWhitelistStatuses(address[],bool[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(suppliers),
        ethereum.Value.fromBooleanArray(statuses)
      ]
    );

    return result[0].toBigInt();
  }

  try__setWhitelistStatuses(
    suppliers: Array<Address>,
    statuses: Array<boolean>
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_setWhitelistStatuses",
      "_setWhitelistStatuses(address[],bool[]):(uint256)",
      [
        ethereum.Value.fromAddressArray(suppliers),
        ethereum.Value.fromBooleanArray(statuses)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _toggleAutoImplementations(enabled: boolean): BigInt {
    let result = super.call(
      "_toggleAutoImplementations",
      "_toggleAutoImplementations(bool):(uint256)",
      [ethereum.Value.fromBoolean(enabled)]
    );

    return result[0].toBigInt();
  }

  try__toggleAutoImplementations(
    enabled: boolean
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_toggleAutoImplementations",
      "_toggleAutoImplementations(bool):(uint256)",
      [ethereum.Value.fromBoolean(enabled)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  _unsupportMarket(cToken: Address): BigInt {
    let result = super.call(
      "_unsupportMarket",
      "_unsupportMarket(address):(uint256)",
      [ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBigInt();
  }

  try__unsupportMarket(cToken: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_unsupportMarket",
      "_unsupportMarket(address):(uint256)",
      [ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  accountAssets(param0: Address, param1: BigInt): Address {
    let result = super.call(
      "accountAssets",
      "accountAssets(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return result[0].toAddress();
  }

  try_accountAssets(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "accountAssets",
      "accountAssets(address,uint256):(address)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  adminHasRights(): boolean {
    let result = super.call("adminHasRights", "adminHasRights():(bool)", []);

    return result[0].toBoolean();
  }

  try_adminHasRights(): ethereum.CallResult<boolean> {
    let result = super.tryCall("adminHasRights", "adminHasRights():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  allBorrowers(param0: BigInt): Address {
    let result = super.call("allBorrowers", "allBorrowers(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allBorrowers(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "allBorrowers",
      "allBorrowers(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  allMarkets(param0: BigInt): Address {
    let result = super.call("allMarkets", "allMarkets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toAddress();
  }

  try_allMarkets(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall("allMarkets", "allMarkets(uint256):(address)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  autoImplementation(): boolean {
    let result = super.call(
      "autoImplementation",
      "autoImplementation():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_autoImplementation(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "autoImplementation",
      "autoImplementation():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  borrowAllowed(
    cToken: Address,
    borrower: Address,
    borrowAmount: BigInt
  ): BigInt {
    let result = super.call(
      "borrowAllowed",
      "borrowAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrowAllowed(
    cToken: Address,
    borrower: Address,
    borrowAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowAllowed",
      "borrowAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowCapGuardian(): Address {
    let result = super.call(
      "borrowCapGuardian",
      "borrowCapGuardian():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_borrowCapGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "borrowCapGuardian",
      "borrowCapGuardian():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  borrowCaps(param0: Address): BigInt {
    let result = super.call("borrowCaps", "borrowCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_borrowCaps(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("borrowCaps", "borrowCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  borrowGuardianPaused(param0: Address): boolean {
    let result = super.call(
      "borrowGuardianPaused",
      "borrowGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_borrowGuardianPaused(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "borrowGuardianPaused",
      "borrowGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  borrowWithinLimits(cToken: Address, accountBorrowsNew: BigInt): BigInt {
    let result = super.call(
      "borrowWithinLimits",
      "borrowWithinLimits(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(accountBorrowsNew)
      ]
    );

    return result[0].toBigInt();
  }

  try_borrowWithinLimits(
    cToken: Address,
    accountBorrowsNew: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "borrowWithinLimits",
      "borrowWithinLimits(address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(accountBorrowsNew)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  cTokensByUnderlying(param0: Address): Address {
    let result = super.call(
      "cTokensByUnderlying",
      "cTokensByUnderlying(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toAddress();
  }

  try_cTokensByUnderlying(param0: Address): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "cTokensByUnderlying",
      "cTokensByUnderlying(address):(address)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  checkMembership(account: Address, cToken: Address): boolean {
    let result = super.call(
      "checkMembership",
      "checkMembership(address,address):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(cToken)]
    );

    return result[0].toBoolean();
  }

  try_checkMembership(
    account: Address,
    cToken: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkMembership",
      "checkMembership(address,address):(bool)",
      [ethereum.Value.fromAddress(account), ethereum.Value.fromAddress(cToken)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  closeFactorMantissa(): BigInt {
    let result = super.call(
      "closeFactorMantissa",
      "closeFactorMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_closeFactorMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "closeFactorMantissa",
      "closeFactorMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  comptrollerImplementation(): Address {
    let result = super.call(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_comptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "comptrollerImplementation",
      "comptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  enforceWhitelist(): boolean {
    let result = super.call(
      "enforceWhitelist",
      "enforceWhitelist():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_enforceWhitelist(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "enforceWhitelist",
      "enforceWhitelist():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  enterMarkets(cTokens: Array<Address>): Array<BigInt> {
    let result = super.call(
      "enterMarkets",
      "enterMarkets(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(cTokens)]
    );

    return result[0].toBigIntArray();
  }

  try_enterMarkets(
    cTokens: Array<Address>
  ): ethereum.CallResult<Array<BigInt>> {
    let result = super.tryCall(
      "enterMarkets",
      "enterMarkets(address[]):(uint256[])",
      [ethereum.Value.fromAddressArray(cTokens)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigIntArray());
  }

  exitMarket(cTokenAddress: Address): BigInt {
    let result = super.call("exitMarket", "exitMarket(address):(uint256)", [
      ethereum.Value.fromAddress(cTokenAddress)
    ]);

    return result[0].toBigInt();
  }

  try_exitMarket(cTokenAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("exitMarket", "exitMarket(address):(uint256)", [
      ethereum.Value.fromAddress(cTokenAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  fuseAdminHasRights(): boolean {
    let result = super.call(
      "fuseAdminHasRights",
      "fuseAdminHasRights():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_fuseAdminHasRights(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "fuseAdminHasRights",
      "fuseAdminHasRights():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  getAccountLiquidity(
    account: Address
  ): Comptroller__getAccountLiquidityResult {
    let result = super.call(
      "getAccountLiquidity",
      "getAccountLiquidity(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );

    return new Comptroller__getAccountLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getAccountLiquidity(
    account: Address
  ): ethereum.CallResult<Comptroller__getAccountLiquidityResult> {
    let result = super.tryCall(
      "getAccountLiquidity",
      "getAccountLiquidity(address):(uint256,uint256,uint256)",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Comptroller__getAccountLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getAllBorrowers(): Array<Address> {
    let result = super.call(
      "getAllBorrowers",
      "getAllBorrowers():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getAllBorrowers(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllBorrowers",
      "getAllBorrowers():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAllMarkets(): Array<Address> {
    let result = super.call("getAllMarkets", "getAllMarkets():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAllMarkets(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllMarkets",
      "getAllMarkets():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAssetsIn(account: Address): Array<Address> {
    let result = super.call("getAssetsIn", "getAssetsIn(address):(address[])", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toAddressArray();
  }

  try_getAssetsIn(account: Address): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAssetsIn",
      "getAssetsIn(address):(address[])",
      [ethereum.Value.fromAddress(account)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getHypotheticalAccountLiquidity(
    account: Address,
    cTokenModify: Address,
    redeemTokens: BigInt,
    borrowAmount: BigInt
  ): Comptroller__getHypotheticalAccountLiquidityResult {
    let result = super.call(
      "getHypotheticalAccountLiquidity",
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(cTokenModify),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );

    return new Comptroller__getHypotheticalAccountLiquidityResult(
      result[0].toBigInt(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_getHypotheticalAccountLiquidity(
    account: Address,
    cTokenModify: Address,
    redeemTokens: BigInt,
    borrowAmount: BigInt
  ): ethereum.CallResult<Comptroller__getHypotheticalAccountLiquidityResult> {
    let result = super.tryCall(
      "getHypotheticalAccountLiquidity",
      "getHypotheticalAccountLiquidity(address,address,uint256,uint256):(uint256,uint256,uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(cTokenModify),
        ethereum.Value.fromUnsignedBigInt(redeemTokens),
        ethereum.Value.fromUnsignedBigInt(borrowAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Comptroller__getHypotheticalAccountLiquidityResult(
        value[0].toBigInt(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }

  getRewardsDistributors(): Array<Address> {
    let result = super.call(
      "getRewardsDistributors",
      "getRewardsDistributors():(address[])",
      []
    );

    return result[0].toAddressArray();
  }

  try_getRewardsDistributors(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getRewardsDistributors",
      "getRewardsDistributors():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getWhitelist(): Array<Address> {
    let result = super.call("getWhitelist", "getWhitelist():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getWhitelist(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getWhitelist",
      "getWhitelist():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  isComptroller(): boolean {
    let result = super.call("isComptroller", "isComptroller():(bool)", []);

    return result[0].toBoolean();
  }

  try_isComptroller(): ethereum.CallResult<boolean> {
    let result = super.tryCall("isComptroller", "isComptroller():(bool)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isDeprecated(cToken: Address): boolean {
    let result = super.call("isDeprecated", "isDeprecated(address):(bool)", [
      ethereum.Value.fromAddress(cToken)
    ]);

    return result[0].toBoolean();
  }

  try_isDeprecated(cToken: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("isDeprecated", "isDeprecated(address):(bool)", [
      ethereum.Value.fromAddress(cToken)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  liquidateBorrowAllowed(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt
  ): BigInt {
    let result = super.call(
      "liquidateBorrowAllowed",
      "liquidateBorrowAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_liquidateBorrowAllowed(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    liquidator: Address,
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidateBorrowAllowed",
      "liquidateBorrowAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  liquidateCalculateSeizeTokens(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    actualRepayAmount: BigInt
  ): Comptroller__liquidateCalculateSeizeTokensResult {
    let result = super.call(
      "liquidateCalculateSeizeTokens",
      "liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount)
      ]
    );

    return new Comptroller__liquidateCalculateSeizeTokensResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_liquidateCalculateSeizeTokens(
    cTokenBorrowed: Address,
    cTokenCollateral: Address,
    actualRepayAmount: BigInt
  ): ethereum.CallResult<Comptroller__liquidateCalculateSeizeTokensResult> {
    let result = super.tryCall(
      "liquidateCalculateSeizeTokens",
      "liquidateCalculateSeizeTokens(address,address,uint256):(uint256,uint256)",
      [
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromUnsignedBigInt(actualRepayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Comptroller__liquidateCalculateSeizeTokensResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  liquidationIncentiveMantissa(): BigInt {
    let result = super.call(
      "liquidationIncentiveMantissa",
      "liquidationIncentiveMantissa():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_liquidationIncentiveMantissa(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "liquidationIncentiveMantissa",
      "liquidationIncentiveMantissa():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  markets(param0: Address): Comptroller__marketsResult {
    let result = super.call("markets", "markets(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return new Comptroller__marketsResult(
      result[0].toBoolean(),
      result[1].toBigInt()
    );
  }

  try_markets(
    param0: Address
  ): ethereum.CallResult<Comptroller__marketsResult> {
    let result = super.tryCall("markets", "markets(address):(bool,uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Comptroller__marketsResult(value[0].toBoolean(), value[1].toBigInt())
    );
  }

  mintAllowed(cToken: Address, minter: Address, mintAmount: BigInt): BigInt {
    let result = super.call(
      "mintAllowed",
      "mintAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintAllowed(
    cToken: Address,
    minter: Address,
    mintAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintAllowed",
      "mintAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(minter),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  mintGuardianPaused(param0: Address): boolean {
    let result = super.call(
      "mintGuardianPaused",
      "mintGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );

    return result[0].toBoolean();
  }

  try_mintGuardianPaused(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "mintGuardianPaused",
      "mintGuardianPaused(address):(bool)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  mintWithinLimits(
    cToken: Address,
    exchangeRateMantissa: BigInt,
    accountTokens: BigInt,
    mintAmount: BigInt
  ): BigInt {
    let result = super.call(
      "mintWithinLimits",
      "mintWithinLimits(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(exchangeRateMantissa),
        ethereum.Value.fromUnsignedBigInt(accountTokens),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_mintWithinLimits(
    cToken: Address,
    exchangeRateMantissa: BigInt,
    accountTokens: BigInt,
    mintAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "mintWithinLimits",
      "mintWithinLimits(address,uint256,uint256,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromUnsignedBigInt(exchangeRateMantissa),
        ethereum.Value.fromUnsignedBigInt(accountTokens),
        ethereum.Value.fromUnsignedBigInt(mintAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  oracle(): Address {
    let result = super.call("oracle", "oracle():(address)", []);

    return result[0].toAddress();
  }

  try_oracle(): ethereum.CallResult<Address> {
    let result = super.tryCall("oracle", "oracle():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pauseGuardian(): Address {
    let result = super.call("pauseGuardian", "pauseGuardian():(address)", []);

    return result[0].toAddress();
  }

  try_pauseGuardian(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pauseGuardian",
      "pauseGuardian():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingAdmin(): Address {
    let result = super.call("pendingAdmin", "pendingAdmin():(address)", []);

    return result[0].toAddress();
  }

  try_pendingAdmin(): ethereum.CallResult<Address> {
    let result = super.tryCall("pendingAdmin", "pendingAdmin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  pendingComptrollerImplementation(): Address {
    let result = super.call(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_pendingComptrollerImplementation(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "pendingComptrollerImplementation",
      "pendingComptrollerImplementation():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  redeemAllowed(
    cToken: Address,
    redeemer: Address,
    redeemTokens: BigInt
  ): BigInt {
    let result = super.call(
      "redeemAllowed",
      "redeemAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_redeemAllowed(
    cToken: Address,
    redeemer: Address,
    redeemTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "redeemAllowed",
      "redeemAllowed(address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(redeemer),
        ethereum.Value.fromUnsignedBigInt(redeemTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  repayBorrowAllowed(
    cToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): BigInt {
    let result = super.call(
      "repayBorrowAllowed",
      "repayBorrowAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );

    return result[0].toBigInt();
  }

  try_repayBorrowAllowed(
    cToken: Address,
    payer: Address,
    borrower: Address,
    repayAmount: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "repayBorrowAllowed",
      "repayBorrowAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(payer),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(repayAmount)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  rewardsDistributors(param0: BigInt): Address {
    let result = super.call(
      "rewardsDistributors",
      "rewardsDistributors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_rewardsDistributors(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "rewardsDistributors",
      "rewardsDistributors(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  seizeAllowed(
    cTokenCollateral: Address,
    cTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): BigInt {
    let result = super.call(
      "seizeAllowed",
      "seizeAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_seizeAllowed(
    cTokenCollateral: Address,
    cTokenBorrowed: Address,
    liquidator: Address,
    borrower: Address,
    seizeTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "seizeAllowed",
      "seizeAllowed(address,address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cTokenCollateral),
        ethereum.Value.fromAddress(cTokenBorrowed),
        ethereum.Value.fromAddress(liquidator),
        ethereum.Value.fromAddress(borrower),
        ethereum.Value.fromUnsignedBigInt(seizeTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  seizeGuardianPaused(): boolean {
    let result = super.call(
      "seizeGuardianPaused",
      "seizeGuardianPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_seizeGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "seizeGuardianPaused",
      "seizeGuardianPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  suppliers(param0: Address): boolean {
    let result = super.call("suppliers", "suppliers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_suppliers(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("suppliers", "suppliers(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  supplyCaps(param0: Address): BigInt {
    let result = super.call("supplyCaps", "supplyCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBigInt();
  }

  try_supplyCaps(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("supplyCaps", "supplyCaps(address):(uint256)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferAllowed(
    cToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt
  ): BigInt {
    let result = super.call(
      "transferAllowed",
      "transferAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens)
      ]
    );

    return result[0].toBigInt();
  }

  try_transferAllowed(
    cToken: Address,
    src: Address,
    dst: Address,
    transferTokens: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "transferAllowed",
      "transferAllowed(address,address,address,uint256):(uint256)",
      [
        ethereum.Value.fromAddress(cToken),
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(transferTokens)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transferGuardianPaused(): boolean {
    let result = super.call(
      "transferGuardianPaused",
      "transferGuardianPaused():(bool)",
      []
    );

    return result[0].toBoolean();
  }

  try_transferGuardianPaused(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferGuardianPaused",
      "transferGuardianPaused():(bool)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelist(param0: Address): boolean {
    let result = super.call("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_whitelist(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("whitelist", "whitelist(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  whitelistArray(param0: BigInt): Address {
    let result = super.call(
      "whitelistArray",
      "whitelistArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );

    return result[0].toAddress();
  }

  try_whitelistArray(param0: BigInt): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "whitelistArray",
      "whitelistArray(uint256):(address)",
      [ethereum.Value.fromUnsignedBigInt(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }
}

export class _addRewardsDistributorCall extends ethereum.Call {
  get inputs(): _addRewardsDistributorCall__Inputs {
    return new _addRewardsDistributorCall__Inputs(this);
  }

  get outputs(): _addRewardsDistributorCall__Outputs {
    return new _addRewardsDistributorCall__Outputs(this);
  }
}

export class _addRewardsDistributorCall__Inputs {
  _call: _addRewardsDistributorCall;

  constructor(call: _addRewardsDistributorCall) {
    this._call = call;
  }

  get distributor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _addRewardsDistributorCall__Outputs {
  _call: _addRewardsDistributorCall;

  constructor(call: _addRewardsDistributorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _afterNonReentrantCall extends ethereum.Call {
  get inputs(): _afterNonReentrantCall__Inputs {
    return new _afterNonReentrantCall__Inputs(this);
  }

  get outputs(): _afterNonReentrantCall__Outputs {
    return new _afterNonReentrantCall__Outputs(this);
  }
}

export class _afterNonReentrantCall__Inputs {
  _call: _afterNonReentrantCall;

  constructor(call: _afterNonReentrantCall) {
    this._call = call;
  }
}

export class _afterNonReentrantCall__Outputs {
  _call: _afterNonReentrantCall;

  constructor(call: _afterNonReentrantCall) {
    this._call = call;
  }
}

export class _becomeCall extends ethereum.Call {
  get inputs(): _becomeCall__Inputs {
    return new _becomeCall__Inputs(this);
  }

  get outputs(): _becomeCall__Outputs {
    return new _becomeCall__Outputs(this);
  }
}

export class _becomeCall__Inputs {
  _call: _becomeCall;

  constructor(call: _becomeCall) {
    this._call = call;
  }

  get unitroller(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _becomeCall__Outputs {
  _call: _becomeCall;

  constructor(call: _becomeCall) {
    this._call = call;
  }
}

export class _becomeImplementationCall extends ethereum.Call {
  get inputs(): _becomeImplementationCall__Inputs {
    return new _becomeImplementationCall__Inputs(this);
  }

  get outputs(): _becomeImplementationCall__Outputs {
    return new _becomeImplementationCall__Outputs(this);
  }
}

export class _becomeImplementationCall__Inputs {
  _call: _becomeImplementationCall;

  constructor(call: _becomeImplementationCall) {
    this._call = call;
  }
}

export class _becomeImplementationCall__Outputs {
  _call: _becomeImplementationCall;

  constructor(call: _becomeImplementationCall) {
    this._call = call;
  }
}

export class _beforeNonReentrantCall extends ethereum.Call {
  get inputs(): _beforeNonReentrantCall__Inputs {
    return new _beforeNonReentrantCall__Inputs(this);
  }

  get outputs(): _beforeNonReentrantCall__Outputs {
    return new _beforeNonReentrantCall__Outputs(this);
  }
}

export class _beforeNonReentrantCall__Inputs {
  _call: _beforeNonReentrantCall;

  constructor(call: _beforeNonReentrantCall) {
    this._call = call;
  }
}

export class _beforeNonReentrantCall__Outputs {
  _call: _beforeNonReentrantCall;

  constructor(call: _beforeNonReentrantCall) {
    this._call = call;
  }
}

export class _deployMarketCall extends ethereum.Call {
  get inputs(): _deployMarketCall__Inputs {
    return new _deployMarketCall__Inputs(this);
  }

  get outputs(): _deployMarketCall__Outputs {
    return new _deployMarketCall__Outputs(this);
  }
}

export class _deployMarketCall__Inputs {
  _call: _deployMarketCall;

  constructor(call: _deployMarketCall) {
    this._call = call;
  }

  get isCEther(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }

  get constructorData(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get collateralFactorMantissa(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class _deployMarketCall__Outputs {
  _call: _deployMarketCall;

  constructor(call: _deployMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setBorrowCapGuardianCall extends ethereum.Call {
  get inputs(): _setBorrowCapGuardianCall__Inputs {
    return new _setBorrowCapGuardianCall__Inputs(this);
  }

  get outputs(): _setBorrowCapGuardianCall__Outputs {
    return new _setBorrowCapGuardianCall__Outputs(this);
  }
}

export class _setBorrowCapGuardianCall__Inputs {
  _call: _setBorrowCapGuardianCall;

  constructor(call: _setBorrowCapGuardianCall) {
    this._call = call;
  }

  get newBorrowCapGuardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setBorrowCapGuardianCall__Outputs {
  _call: _setBorrowCapGuardianCall;

  constructor(call: _setBorrowCapGuardianCall) {
    this._call = call;
  }
}

export class _setBorrowPausedCall extends ethereum.Call {
  get inputs(): _setBorrowPausedCall__Inputs {
    return new _setBorrowPausedCall__Inputs(this);
  }

  get outputs(): _setBorrowPausedCall__Outputs {
    return new _setBorrowPausedCall__Outputs(this);
  }
}

export class _setBorrowPausedCall__Inputs {
  _call: _setBorrowPausedCall;

  constructor(call: _setBorrowPausedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class _setBorrowPausedCall__Outputs {
  _call: _setBorrowPausedCall;

  constructor(call: _setBorrowPausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setCloseFactorCall extends ethereum.Call {
  get inputs(): _setCloseFactorCall__Inputs {
    return new _setCloseFactorCall__Inputs(this);
  }

  get outputs(): _setCloseFactorCall__Outputs {
    return new _setCloseFactorCall__Outputs(this);
  }
}

export class _setCloseFactorCall__Inputs {
  _call: _setCloseFactorCall;

  constructor(call: _setCloseFactorCall) {
    this._call = call;
  }

  get newCloseFactorMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setCloseFactorCall__Outputs {
  _call: _setCloseFactorCall;

  constructor(call: _setCloseFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setCollateralFactorCall extends ethereum.Call {
  get inputs(): _setCollateralFactorCall__Inputs {
    return new _setCollateralFactorCall__Inputs(this);
  }

  get outputs(): _setCollateralFactorCall__Outputs {
    return new _setCollateralFactorCall__Outputs(this);
  }
}

export class _setCollateralFactorCall__Inputs {
  _call: _setCollateralFactorCall;

  constructor(call: _setCollateralFactorCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get newCollateralFactorMantissa(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class _setCollateralFactorCall__Outputs {
  _call: _setCollateralFactorCall;

  constructor(call: _setCollateralFactorCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall extends ethereum.Call {
  get inputs(): _setLiquidationIncentiveCall__Inputs {
    return new _setLiquidationIncentiveCall__Inputs(this);
  }

  get outputs(): _setLiquidationIncentiveCall__Outputs {
    return new _setLiquidationIncentiveCall__Outputs(this);
  }
}

export class _setLiquidationIncentiveCall__Inputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get newLiquidationIncentiveMantissa(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class _setLiquidationIncentiveCall__Outputs {
  _call: _setLiquidationIncentiveCall;

  constructor(call: _setLiquidationIncentiveCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setMarketBorrowCapsCall extends ethereum.Call {
  get inputs(): _setMarketBorrowCapsCall__Inputs {
    return new _setMarketBorrowCapsCall__Inputs(this);
  }

  get outputs(): _setMarketBorrowCapsCall__Outputs {
    return new _setMarketBorrowCapsCall__Outputs(this);
  }
}

export class _setMarketBorrowCapsCall__Inputs {
  _call: _setMarketBorrowCapsCall;

  constructor(call: _setMarketBorrowCapsCall) {
    this._call = call;
  }

  get cTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get newBorrowCaps(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class _setMarketBorrowCapsCall__Outputs {
  _call: _setMarketBorrowCapsCall;

  constructor(call: _setMarketBorrowCapsCall) {
    this._call = call;
  }
}

export class _setMarketSupplyCapsCall extends ethereum.Call {
  get inputs(): _setMarketSupplyCapsCall__Inputs {
    return new _setMarketSupplyCapsCall__Inputs(this);
  }

  get outputs(): _setMarketSupplyCapsCall__Outputs {
    return new _setMarketSupplyCapsCall__Outputs(this);
  }
}

export class _setMarketSupplyCapsCall__Inputs {
  _call: _setMarketSupplyCapsCall;

  constructor(call: _setMarketSupplyCapsCall) {
    this._call = call;
  }

  get cTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get newSupplyCaps(): Array<BigInt> {
    return this._call.inputValues[1].value.toBigIntArray();
  }
}

export class _setMarketSupplyCapsCall__Outputs {
  _call: _setMarketSupplyCapsCall;

  constructor(call: _setMarketSupplyCapsCall) {
    this._call = call;
  }
}

export class _setMintPausedCall extends ethereum.Call {
  get inputs(): _setMintPausedCall__Inputs {
    return new _setMintPausedCall__Inputs(this);
  }

  get outputs(): _setMintPausedCall__Outputs {
    return new _setMintPausedCall__Outputs(this);
  }
}

export class _setMintPausedCall__Inputs {
  _call: _setMintPausedCall;

  constructor(call: _setMintPausedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get state(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class _setMintPausedCall__Outputs {
  _call: _setMintPausedCall;

  constructor(call: _setMintPausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setPauseGuardianCall extends ethereum.Call {
  get inputs(): _setPauseGuardianCall__Inputs {
    return new _setPauseGuardianCall__Inputs(this);
  }

  get outputs(): _setPauseGuardianCall__Outputs {
    return new _setPauseGuardianCall__Outputs(this);
  }
}

export class _setPauseGuardianCall__Inputs {
  _call: _setPauseGuardianCall;

  constructor(call: _setPauseGuardianCall) {
    this._call = call;
  }

  get newPauseGuardian(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPauseGuardianCall__Outputs {
  _call: _setPauseGuardianCall;

  constructor(call: _setPauseGuardianCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setPriceOracleCall extends ethereum.Call {
  get inputs(): _setPriceOracleCall__Inputs {
    return new _setPriceOracleCall__Inputs(this);
  }

  get outputs(): _setPriceOracleCall__Outputs {
    return new _setPriceOracleCall__Outputs(this);
  }
}

export class _setPriceOracleCall__Inputs {
  _call: _setPriceOracleCall;

  constructor(call: _setPriceOracleCall) {
    this._call = call;
  }

  get newOracle(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _setPriceOracleCall__Outputs {
  _call: _setPriceOracleCall;

  constructor(call: _setPriceOracleCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setSeizePausedCall extends ethereum.Call {
  get inputs(): _setSeizePausedCall__Inputs {
    return new _setSeizePausedCall__Inputs(this);
  }

  get outputs(): _setSeizePausedCall__Outputs {
    return new _setSeizePausedCall__Outputs(this);
  }
}

export class _setSeizePausedCall__Inputs {
  _call: _setSeizePausedCall;

  constructor(call: _setSeizePausedCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _setSeizePausedCall__Outputs {
  _call: _setSeizePausedCall;

  constructor(call: _setSeizePausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setTransferPausedCall extends ethereum.Call {
  get inputs(): _setTransferPausedCall__Inputs {
    return new _setTransferPausedCall__Inputs(this);
  }

  get outputs(): _setTransferPausedCall__Outputs {
    return new _setTransferPausedCall__Outputs(this);
  }
}

export class _setTransferPausedCall__Inputs {
  _call: _setTransferPausedCall;

  constructor(call: _setTransferPausedCall) {
    this._call = call;
  }

  get state(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _setTransferPausedCall__Outputs {
  _call: _setTransferPausedCall;

  constructor(call: _setTransferPausedCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class _setWhitelistEnforcementCall extends ethereum.Call {
  get inputs(): _setWhitelistEnforcementCall__Inputs {
    return new _setWhitelistEnforcementCall__Inputs(this);
  }

  get outputs(): _setWhitelistEnforcementCall__Outputs {
    return new _setWhitelistEnforcementCall__Outputs(this);
  }
}

export class _setWhitelistEnforcementCall__Inputs {
  _call: _setWhitelistEnforcementCall;

  constructor(call: _setWhitelistEnforcementCall) {
    this._call = call;
  }

  get enforce(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _setWhitelistEnforcementCall__Outputs {
  _call: _setWhitelistEnforcementCall;

  constructor(call: _setWhitelistEnforcementCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _setWhitelistStatusesCall extends ethereum.Call {
  get inputs(): _setWhitelistStatusesCall__Inputs {
    return new _setWhitelistStatusesCall__Inputs(this);
  }

  get outputs(): _setWhitelistStatusesCall__Outputs {
    return new _setWhitelistStatusesCall__Outputs(this);
  }
}

export class _setWhitelistStatusesCall__Inputs {
  _call: _setWhitelistStatusesCall;

  constructor(call: _setWhitelistStatusesCall) {
    this._call = call;
  }

  get suppliers(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }

  get statuses(): Array<boolean> {
    return this._call.inputValues[1].value.toBooleanArray();
  }
}

export class _setWhitelistStatusesCall__Outputs {
  _call: _setWhitelistStatusesCall;

  constructor(call: _setWhitelistStatusesCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _toggleAutoImplementationsCall extends ethereum.Call {
  get inputs(): _toggleAutoImplementationsCall__Inputs {
    return new _toggleAutoImplementationsCall__Inputs(this);
  }

  get outputs(): _toggleAutoImplementationsCall__Outputs {
    return new _toggleAutoImplementationsCall__Outputs(this);
  }
}

export class _toggleAutoImplementationsCall__Inputs {
  _call: _toggleAutoImplementationsCall;

  constructor(call: _toggleAutoImplementationsCall) {
    this._call = call;
  }

  get enabled(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class _toggleAutoImplementationsCall__Outputs {
  _call: _toggleAutoImplementationsCall;

  constructor(call: _toggleAutoImplementationsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class _unsupportMarketCall extends ethereum.Call {
  get inputs(): _unsupportMarketCall__Inputs {
    return new _unsupportMarketCall__Inputs(this);
  }

  get outputs(): _unsupportMarketCall__Outputs {
    return new _unsupportMarketCall__Outputs(this);
  }
}

export class _unsupportMarketCall__Inputs {
  _call: _unsupportMarketCall;

  constructor(call: _unsupportMarketCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class _unsupportMarketCall__Outputs {
  _call: _unsupportMarketCall;

  constructor(call: _unsupportMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowAllowedCall extends ethereum.Call {
  get inputs(): BorrowAllowedCall__Inputs {
    return new BorrowAllowedCall__Inputs(this);
  }

  get outputs(): BorrowAllowedCall__Outputs {
    return new BorrowAllowedCall__Outputs(this);
  }
}

export class BorrowAllowedCall__Inputs {
  _call: BorrowAllowedCall;

  constructor(call: BorrowAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowAllowedCall__Outputs {
  _call: BorrowAllowedCall;

  constructor(call: BorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class BorrowVerifyCall extends ethereum.Call {
  get inputs(): BorrowVerifyCall__Inputs {
    return new BorrowVerifyCall__Inputs(this);
  }

  get outputs(): BorrowVerifyCall__Outputs {
    return new BorrowVerifyCall__Outputs(this);
  }
}

export class BorrowVerifyCall__Inputs {
  _call: BorrowVerifyCall;

  constructor(call: BorrowVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrowAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class BorrowVerifyCall__Outputs {
  _call: BorrowVerifyCall;

  constructor(call: BorrowVerifyCall) {
    this._call = call;
  }
}

export class BorrowWithinLimitsCall extends ethereum.Call {
  get inputs(): BorrowWithinLimitsCall__Inputs {
    return new BorrowWithinLimitsCall__Inputs(this);
  }

  get outputs(): BorrowWithinLimitsCall__Outputs {
    return new BorrowWithinLimitsCall__Outputs(this);
  }
}

export class BorrowWithinLimitsCall__Inputs {
  _call: BorrowWithinLimitsCall;

  constructor(call: BorrowWithinLimitsCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get accountBorrowsNew(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class BorrowWithinLimitsCall__Outputs {
  _call: BorrowWithinLimitsCall;

  constructor(call: BorrowWithinLimitsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class EnterMarketsCall extends ethereum.Call {
  get inputs(): EnterMarketsCall__Inputs {
    return new EnterMarketsCall__Inputs(this);
  }

  get outputs(): EnterMarketsCall__Outputs {
    return new EnterMarketsCall__Outputs(this);
  }
}

export class EnterMarketsCall__Inputs {
  _call: EnterMarketsCall;

  constructor(call: EnterMarketsCall) {
    this._call = call;
  }

  get cTokens(): Array<Address> {
    return this._call.inputValues[0].value.toAddressArray();
  }
}

export class EnterMarketsCall__Outputs {
  _call: EnterMarketsCall;

  constructor(call: EnterMarketsCall) {
    this._call = call;
  }

  get value0(): Array<BigInt> {
    return this._call.outputValues[0].value.toBigIntArray();
  }
}

export class ExitMarketCall extends ethereum.Call {
  get inputs(): ExitMarketCall__Inputs {
    return new ExitMarketCall__Inputs(this);
  }

  get outputs(): ExitMarketCall__Outputs {
    return new ExitMarketCall__Outputs(this);
  }
}

export class ExitMarketCall__Inputs {
  _call: ExitMarketCall;

  constructor(call: ExitMarketCall) {
    this._call = call;
  }

  get cTokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ExitMarketCall__Outputs {
  _call: ExitMarketCall;

  constructor(call: ExitMarketCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateBorrowAllowedCall extends ethereum.Call {
  get inputs(): LiquidateBorrowAllowedCall__Inputs {
    return new LiquidateBorrowAllowedCall__Inputs(this);
  }

  get outputs(): LiquidateBorrowAllowedCall__Outputs {
    return new LiquidateBorrowAllowedCall__Outputs(this);
  }
}

export class LiquidateBorrowAllowedCall__Inputs {
  _call: LiquidateBorrowAllowedCall;

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call;
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class LiquidateBorrowAllowedCall__Outputs {
  _call: LiquidateBorrowAllowedCall;

  constructor(call: LiquidateBorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class LiquidateBorrowVerifyCall extends ethereum.Call {
  get inputs(): LiquidateBorrowVerifyCall__Inputs {
    return new LiquidateBorrowVerifyCall__Inputs(this);
  }

  get outputs(): LiquidateBorrowVerifyCall__Outputs {
    return new LiquidateBorrowVerifyCall__Outputs(this);
  }
}

export class LiquidateBorrowVerifyCall__Inputs {
  _call: LiquidateBorrowVerifyCall;

  constructor(call: LiquidateBorrowVerifyCall) {
    this._call = call;
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get actualRepayAmount(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class LiquidateBorrowVerifyCall__Outputs {
  _call: LiquidateBorrowVerifyCall;

  constructor(call: LiquidateBorrowVerifyCall) {
    this._call = call;
  }
}

export class MintAllowedCall extends ethereum.Call {
  get inputs(): MintAllowedCall__Inputs {
    return new MintAllowedCall__Inputs(this);
  }

  get outputs(): MintAllowedCall__Outputs {
    return new MintAllowedCall__Outputs(this);
  }
}

export class MintAllowedCall__Inputs {
  _call: MintAllowedCall;

  constructor(call: MintAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class MintAllowedCall__Outputs {
  _call: MintAllowedCall;

  constructor(call: MintAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class MintVerifyCall extends ethereum.Call {
  get inputs(): MintVerifyCall__Inputs {
    return new MintVerifyCall__Inputs(this);
  }

  get outputs(): MintVerifyCall__Outputs {
    return new MintVerifyCall__Outputs(this);
  }
}

export class MintVerifyCall__Inputs {
  _call: MintVerifyCall;

  constructor(call: MintVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get minter(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get actualMintAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mintTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintVerifyCall__Outputs {
  _call: MintVerifyCall;

  constructor(call: MintVerifyCall) {
    this._call = call;
  }
}

export class MintWithinLimitsCall extends ethereum.Call {
  get inputs(): MintWithinLimitsCall__Inputs {
    return new MintWithinLimitsCall__Inputs(this);
  }

  get outputs(): MintWithinLimitsCall__Outputs {
    return new MintWithinLimitsCall__Outputs(this);
  }
}

export class MintWithinLimitsCall__Inputs {
  _call: MintWithinLimitsCall;

  constructor(call: MintWithinLimitsCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get exchangeRateMantissa(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get accountTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get mintAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class MintWithinLimitsCall__Outputs {
  _call: MintWithinLimitsCall;

  constructor(call: MintWithinLimitsCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemAllowedCall extends ethereum.Call {
  get inputs(): RedeemAllowedCall__Inputs {
    return new RedeemAllowedCall__Inputs(this);
  }

  get outputs(): RedeemAllowedCall__Outputs {
    return new RedeemAllowedCall__Outputs(this);
  }
}

export class RedeemAllowedCall__Inputs {
  _call: RedeemAllowedCall;

  constructor(call: RedeemAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class RedeemAllowedCall__Outputs {
  _call: RedeemAllowedCall;

  constructor(call: RedeemAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RedeemVerifyCall extends ethereum.Call {
  get inputs(): RedeemVerifyCall__Inputs {
    return new RedeemVerifyCall__Inputs(this);
  }

  get outputs(): RedeemVerifyCall__Outputs {
    return new RedeemVerifyCall__Outputs(this);
  }
}

export class RedeemVerifyCall__Inputs {
  _call: RedeemVerifyCall;

  constructor(call: RedeemVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get redeemer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get redeemAmount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get redeemTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RedeemVerifyCall__Outputs {
  _call: RedeemVerifyCall;

  constructor(call: RedeemVerifyCall) {
    this._call = call;
  }
}

export class RepayBorrowAllowedCall extends ethereum.Call {
  get inputs(): RepayBorrowAllowedCall__Inputs {
    return new RepayBorrowAllowedCall__Inputs(this);
  }

  get outputs(): RepayBorrowAllowedCall__Outputs {
    return new RepayBorrowAllowedCall__Outputs(this);
  }
}

export class RepayBorrowAllowedCall__Inputs {
  _call: RepayBorrowAllowedCall;

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get repayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class RepayBorrowAllowedCall__Outputs {
  _call: RepayBorrowAllowedCall;

  constructor(call: RepayBorrowAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class RepayBorrowVerifyCall extends ethereum.Call {
  get inputs(): RepayBorrowVerifyCall__Inputs {
    return new RepayBorrowVerifyCall__Inputs(this);
  }

  get outputs(): RepayBorrowVerifyCall__Outputs {
    return new RepayBorrowVerifyCall__Outputs(this);
  }
}

export class RepayBorrowVerifyCall__Inputs {
  _call: RepayBorrowVerifyCall;

  constructor(call: RepayBorrowVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get payer(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get actualRepayAmount(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get borrowerIndex(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class RepayBorrowVerifyCall__Outputs {
  _call: RepayBorrowVerifyCall;

  constructor(call: RepayBorrowVerifyCall) {
    this._call = call;
  }
}

export class SeizeAllowedCall extends ethereum.Call {
  get inputs(): SeizeAllowedCall__Inputs {
    return new SeizeAllowedCall__Inputs(this);
  }

  get outputs(): SeizeAllowedCall__Outputs {
    return new SeizeAllowedCall__Outputs(this);
  }
}

export class SeizeAllowedCall__Inputs {
  _call: SeizeAllowedCall;

  constructor(call: SeizeAllowedCall) {
    this._call = call;
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SeizeAllowedCall__Outputs {
  _call: SeizeAllowedCall;

  constructor(call: SeizeAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class SeizeVerifyCall extends ethereum.Call {
  get inputs(): SeizeVerifyCall__Inputs {
    return new SeizeVerifyCall__Inputs(this);
  }

  get outputs(): SeizeVerifyCall__Outputs {
    return new SeizeVerifyCall__Outputs(this);
  }
}

export class SeizeVerifyCall__Inputs {
  _call: SeizeVerifyCall;

  constructor(call: SeizeVerifyCall) {
    this._call = call;
  }

  get cTokenCollateral(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get cTokenBorrowed(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get liquidator(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get borrower(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get seizeTokens(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }
}

export class SeizeVerifyCall__Outputs {
  _call: SeizeVerifyCall;

  constructor(call: SeizeVerifyCall) {
    this._call = call;
  }
}

export class TransferAllowedCall extends ethereum.Call {
  get inputs(): TransferAllowedCall__Inputs {
    return new TransferAllowedCall__Inputs(this);
  }

  get outputs(): TransferAllowedCall__Outputs {
    return new TransferAllowedCall__Outputs(this);
  }
}

export class TransferAllowedCall__Inputs {
  _call: TransferAllowedCall;

  constructor(call: TransferAllowedCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferAllowedCall__Outputs {
  _call: TransferAllowedCall;

  constructor(call: TransferAllowedCall) {
    this._call = call;
  }

  get value0(): BigInt {
    return this._call.outputValues[0].value.toBigInt();
  }
}

export class TransferVerifyCall extends ethereum.Call {
  get inputs(): TransferVerifyCall__Inputs {
    return new TransferVerifyCall__Inputs(this);
  }

  get outputs(): TransferVerifyCall__Outputs {
    return new TransferVerifyCall__Outputs(this);
  }
}

export class TransferVerifyCall__Inputs {
  _call: TransferVerifyCall;

  constructor(call: TransferVerifyCall) {
    this._call = call;
  }

  get cToken(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get src(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get transferTokens(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class TransferVerifyCall__Outputs {
  _call: TransferVerifyCall;

  constructor(call: TransferVerifyCall) {
    this._call = call;
  }
}
